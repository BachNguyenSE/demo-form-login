"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mswjs";
exports.ids = ["vendor-chunks/@mswjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@mswjs/cookies/lib/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@mswjs/cookies/lib/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PERSISTENCY_KEY: () => (/* binding */ PERSISTENCY_KEY),\n/* harmony export */   store: () => (/* binding */ store)\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/set-cookie-parser/lib/set-cookie.js\nvar require_set_cookie = __commonJS({\n  \"node_modules/set-cookie-parser/lib/set-cookie.js\"(exports, module) {\n    \"use strict\";\n    var defaultParseOptions = {\n      decodeValues: true,\n      map: false,\n      silent: false\n    };\n    function isNonEmptyString(str) {\n      return typeof str === \"string\" && !!str.trim();\n    }\n    function parseString(setCookieValue, options) {\n      var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n      var nameValuePairStr = parts.shift();\n      var parsed = parseNameValuePair(nameValuePairStr);\n      var name = parsed.name;\n      var value = parsed.value;\n      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n      try {\n        value = options.decodeValues ? decodeURIComponent(value) : value;\n      } catch (e) {\n        console.error(\n          \"set-cookie-parser encountered an error while decoding a cookie with value '\" + value + \"'. Set options.decodeValues to false to disable this feature.\",\n          e\n        );\n      }\n      var cookie = {\n        name,\n        value\n      };\n      parts.forEach(function(part) {\n        var sides = part.split(\"=\");\n        var key = sides.shift().trimLeft().toLowerCase();\n        var value2 = sides.join(\"=\");\n        if (key === \"expires\") {\n          cookie.expires = new Date(value2);\n        } else if (key === \"max-age\") {\n          cookie.maxAge = parseInt(value2, 10);\n        } else if (key === \"secure\") {\n          cookie.secure = true;\n        } else if (key === \"httponly\") {\n          cookie.httpOnly = true;\n        } else if (key === \"samesite\") {\n          cookie.sameSite = value2;\n        } else {\n          cookie[key] = value2;\n        }\n      });\n      return cookie;\n    }\n    function parseNameValuePair(nameValuePairStr) {\n      var name = \"\";\n      var value = \"\";\n      var nameValueArr = nameValuePairStr.split(\"=\");\n      if (nameValueArr.length > 1) {\n        name = nameValueArr.shift();\n        value = nameValueArr.join(\"=\");\n      } else {\n        value = nameValuePairStr;\n      }\n      return { name, value };\n    }\n    function parse(input, options) {\n      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n      if (!input) {\n        if (!options.map) {\n          return [];\n        } else {\n          return {};\n        }\n      }\n      if (input.headers) {\n        if (typeof input.headers.getSetCookie === \"function\") {\n          input = input.headers.getSetCookie();\n        } else if (input.headers[\"set-cookie\"]) {\n          input = input.headers[\"set-cookie\"];\n        } else {\n          var sch = input.headers[Object.keys(input.headers).find(function(key) {\n            return key.toLowerCase() === \"set-cookie\";\n          })];\n          if (!sch && input.headers.cookie && !options.silent) {\n            console.warn(\n              \"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\"\n            );\n          }\n          input = sch;\n        }\n      }\n      if (!Array.isArray(input)) {\n        input = [input];\n      }\n      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n      if (!options.map) {\n        return input.filter(isNonEmptyString).map(function(str) {\n          return parseString(str, options);\n        });\n      } else {\n        var cookies = {};\n        return input.filter(isNonEmptyString).reduce(function(cookies2, str) {\n          var cookie = parseString(str, options);\n          cookies2[cookie.name] = cookie;\n          return cookies2;\n        }, cookies);\n      }\n    }\n    function splitCookiesString(cookiesString) {\n      if (Array.isArray(cookiesString)) {\n        return cookiesString;\n      }\n      if (typeof cookiesString !== \"string\") {\n        return [];\n      }\n      var cookiesStrings = [];\n      var pos = 0;\n      var start;\n      var ch;\n      var lastComma;\n      var nextStart;\n      var cookiesSeparatorFound;\n      function skipWhitespace() {\n        while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n          pos += 1;\n        }\n        return pos < cookiesString.length;\n      }\n      function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n      }\n      while (pos < cookiesString.length) {\n        start = pos;\n        cookiesSeparatorFound = false;\n        while (skipWhitespace()) {\n          ch = cookiesString.charAt(pos);\n          if (ch === \",\") {\n            lastComma = pos;\n            pos += 1;\n            skipWhitespace();\n            nextStart = pos;\n            while (pos < cookiesString.length && notSpecialChar()) {\n              pos += 1;\n            }\n            if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n              cookiesSeparatorFound = true;\n              pos = nextStart;\n              cookiesStrings.push(cookiesString.substring(start, lastComma));\n              start = pos;\n            } else {\n              pos = lastComma + 1;\n            }\n          } else {\n            pos += 1;\n          }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n          cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n      }\n      return cookiesStrings;\n    }\n    module.exports = parse;\n    module.exports.parse = parse;\n    module.exports.parseString = parseString;\n    module.exports.splitCookiesString = splitCookiesString;\n  }\n});\n\n// src/store.ts\nvar import_set_cookie_parser = __toESM(require_set_cookie());\nvar PERSISTENCY_KEY = \"MSW_COOKIE_STORE\";\nfunction supportsLocalStorage() {\n  try {\n    if (localStorage == null) {\n      return false;\n    }\n    const testKey = PERSISTENCY_KEY + \"_test\";\n    localStorage.setItem(testKey, \"test\");\n    localStorage.getItem(testKey);\n    localStorage.removeItem(testKey);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\nfunction isPropertyAccessible(object, method) {\n  try {\n    object[method];\n    return true;\n  } catch {\n    return false;\n  }\n}\nvar CookieStore = class {\n  constructor() {\n    this.store = /* @__PURE__ */ new Map();\n  }\n  add(request, response) {\n    if (isPropertyAccessible(request, \"credentials\") && request.credentials === \"omit\") {\n      return;\n    }\n    const requestUrl = new URL(request.url);\n    const responseCookies = response.headers.get(\"set-cookie\");\n    if (!responseCookies) {\n      return;\n    }\n    const now = Date.now();\n    const parsedResponseCookies = (0, import_set_cookie_parser.parse)(responseCookies).map(\n      ({ maxAge, ...cookie }) => ({\n        ...cookie,\n        expires: maxAge === void 0 ? cookie.expires : new Date(now + maxAge * 1e3),\n        maxAge\n      })\n    );\n    const prevCookies = this.store.get(requestUrl.origin) || /* @__PURE__ */ new Map();\n    parsedResponseCookies.forEach((cookie) => {\n      this.store.set(requestUrl.origin, prevCookies.set(cookie.name, cookie));\n    });\n  }\n  get(request) {\n    this.deleteExpiredCookies();\n    const requestUrl = new URL(request.url);\n    const originCookies = this.store.get(requestUrl.origin) || /* @__PURE__ */ new Map();\n    if (!isPropertyAccessible(request, \"credentials\")) {\n      return originCookies;\n    }\n    switch (request.credentials) {\n      case \"include\": {\n        if (typeof document === \"undefined\") {\n          return originCookies;\n        }\n        const documentCookies = (0, import_set_cookie_parser.parse)(document.cookie);\n        documentCookies.forEach((cookie) => {\n          originCookies.set(cookie.name, cookie);\n        });\n        return originCookies;\n      }\n      case \"same-origin\": {\n        return originCookies;\n      }\n      default:\n        return /* @__PURE__ */ new Map();\n    }\n  }\n  getAll() {\n    this.deleteExpiredCookies();\n    return this.store;\n  }\n  deleteAll(request) {\n    const requestUrl = new URL(request.url);\n    this.store.delete(requestUrl.origin);\n  }\n  clear() {\n    this.store.clear();\n  }\n  hydrate() {\n    if (!supportsLocalStorage()) {\n      return;\n    }\n    const persistedCookies = localStorage.getItem(PERSISTENCY_KEY);\n    if (!persistedCookies) {\n      return;\n    }\n    try {\n      const parsedCookies = JSON.parse(persistedCookies);\n      parsedCookies.forEach(([origin, cookies]) => {\n        this.store.set(\n          origin,\n          new Map(\n            cookies.map(([token, { expires, ...cookie }]) => [\n              token,\n              expires === void 0 ? cookie : { ...cookie, expires: new Date(expires) }\n            ])\n          )\n        );\n      });\n    } catch (error) {\n      console.warn(`\n[virtual-cookie] Failed to parse a stored cookie from the localStorage (key \"${PERSISTENCY_KEY}\").\n\nStored value:\n${localStorage.getItem(PERSISTENCY_KEY)}\n\nThrown exception:\n${error}\n\nInvalid value has been removed from localStorage to prevent subsequent failed parsing attempts.`);\n      localStorage.removeItem(PERSISTENCY_KEY);\n    }\n  }\n  persist() {\n    if (!supportsLocalStorage()) {\n      return;\n    }\n    const serializedCookies = Array.from(this.store.entries()).map(\n      ([origin, cookies]) => {\n        return [origin, Array.from(cookies.entries())];\n      }\n    );\n    localStorage.setItem(PERSISTENCY_KEY, JSON.stringify(serializedCookies));\n  }\n  deleteExpiredCookies() {\n    const now = Date.now();\n    this.store.forEach((originCookies, origin) => {\n      originCookies.forEach(({ expires, name }) => {\n        if (expires !== void 0 && expires.getTime() <= now) {\n          originCookies.delete(name);\n        }\n      });\n      if (originCookies.size === 0) {\n        this.store.delete(origin);\n      }\n    });\n  }\n};\nvar store = new CookieStore();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mswjs/cookies/lib/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-6HYIRFX2.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-6HYIRFX2.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeBuffer: () => (/* binding */ decodeBuffer),\n/* harmony export */   encodeBuffer: () => (/* binding */ encodeBuffer),\n/* harmony export */   toArrayBuffer: () => (/* binding */ toArrayBuffer)\n/* harmony export */ });\n// src/utils/bufferUtils.ts\nvar encoder = new TextEncoder();\nfunction encodeBuffer(text) {\n  return encoder.encode(text);\n}\nfunction decodeBuffer(buffer, encoding) {\n  const decoder = new TextDecoder(encoding);\n  return decoder.decode(buffer);\n}\nfunction toArrayBuffer(array) {\n  return array.buffer.slice(\n    array.byteOffset,\n    array.byteOffset + array.byteLength\n  );\n}\n\n\n//# sourceMappingURL=chunk-6HYIRFX2.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay02SFlJUkZYMi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU1FO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZW1vLWxvZ2luLy4vbm9kZV9tb2R1bGVzL0Btc3dqcy9pbnRlcmNlcHRvcnMvbGliL25vZGUvY2h1bmstNkhZSVJGWDIubWpzPzFhNDQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3V0aWxzL2J1ZmZlclV0aWxzLnRzXG52YXIgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuZnVuY3Rpb24gZW5jb2RlQnVmZmVyKHRleHQpIHtcbiAgcmV0dXJuIGVuY29kZXIuZW5jb2RlKHRleHQpO1xufVxuZnVuY3Rpb24gZGVjb2RlQnVmZmVyKGJ1ZmZlciwgZW5jb2RpbmcpIHtcbiAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcihlbmNvZGluZyk7XG4gIHJldHVybiBkZWNvZGVyLmRlY29kZShidWZmZXIpO1xufVxuZnVuY3Rpb24gdG9BcnJheUJ1ZmZlcihhcnJheSkge1xuICByZXR1cm4gYXJyYXkuYnVmZmVyLnNsaWNlKFxuICAgIGFycmF5LmJ5dGVPZmZzZXQsXG4gICAgYXJyYXkuYnl0ZU9mZnNldCArIGFycmF5LmJ5dGVMZW5ndGhcbiAgKTtcbn1cblxuZXhwb3J0IHtcbiAgZW5jb2RlQnVmZmVyLFxuICBkZWNvZGVCdWZmZXIsXG4gIHRvQXJyYXlCdWZmZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay02SFlJUkZYMi5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-6HYIRFX2.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-CCASONWB.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-CCASONWB.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientRequestInterceptor: () => (/* binding */ ClientRequestInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_IBYBTTYK_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-IBYBTTYK.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-IBYBTTYK.mjs\");\n/* harmony import */ var _chunk_DERTLGL3_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-DERTLGL3.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-DERTLGL3.mjs\");\n/* harmony import */ var _chunk_OUWBQF3Z_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-OUWBQF3Z.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-OUWBQF3Z.mjs\");\n/* harmony import */ var _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-QED3Q6Z2.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-QED3Q6Z2.mjs\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var _open_draft_until__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @open-draft/until */ \"(ssr)/./node_modules/@open-draft/until/lib/index.mjs\");\n/* harmony import */ var _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @open-draft/deferred-promise */ \"(ssr)/./node_modules/@open-draft/deferred-promise/build/index.mjs\");\n/* harmony import */ var _open_draft_logger__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @open-draft/logger */ \"(ssr)/./node_modules/@open-draft/logger/lib/index.mjs\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! url */ \"url\");\n\n\n\n\n\n// src/interceptors/ClientRequest/index.ts\n\n\n\n// src/interceptors/ClientRequest/NodeClientRequest.ts\n\n\n\n\n// src/interceptors/ClientRequest/utils/normalizeClientRequestEndArgs.ts\n\nvar logger = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_8__.Logger(\"utils getUrlByRequestOptions\");\nfunction normalizeClientRequestEndArgs(...args) {\n  logger.info(\"arguments\", args);\n  const normalizedArgs = new Array(3).fill(null).map((value, index) => args[index] || value);\n  normalizedArgs.sort((a, b) => {\n    if (typeof a === \"function\") {\n      return 1;\n    }\n    if (typeof b === \"function\") {\n      return -1;\n    }\n    if (typeof a === \"string\" && typeof b === \"string\") {\n      return normalizedArgs.indexOf(a) - normalizedArgs.indexOf(b);\n    }\n    return 0;\n  });\n  logger.info(\"normalized args\", normalizedArgs);\n  return normalizedArgs;\n}\n\n// src/interceptors/ClientRequest/utils/normalizeClientRequestWriteArgs.ts\n\nvar logger2 = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_8__.Logger(\"http normalizeWriteArgs\");\nfunction normalizeClientRequestWriteArgs(args) {\n  logger2.info(\"normalizing ClientRequest.write arguments...\", args);\n  const chunk = args[0];\n  const encoding = typeof args[1] === \"string\" ? args[1] : void 0;\n  const callback = typeof args[1] === \"function\" ? args[1] : args[2];\n  const writeArgs = [\n    chunk,\n    encoding,\n    callback\n  ];\n  logger2.info(\n    \"successfully normalized ClientRequest.write arguments:\",\n    writeArgs\n  );\n  return writeArgs;\n}\n\n// src/interceptors/ClientRequest/utils/cloneIncomingMessage.ts\n\n\nvar IS_CLONE = Symbol(\"isClone\");\nfunction cloneIncomingMessage(message) {\n  const clone = message.pipe(new stream__WEBPACK_IMPORTED_MODULE_9__.PassThrough());\n  inheritProperties(message, clone);\n  const clonedPrototype = Object.create(http__WEBPACK_IMPORTED_MODULE_4__.IncomingMessage.prototype);\n  getPrototypes(clone).forEach((prototype) => {\n    inheritProperties(prototype, clonedPrototype);\n  });\n  Object.setPrototypeOf(clone, clonedPrototype);\n  Object.defineProperty(clone, IS_CLONE, {\n    enumerable: true,\n    value: true\n  });\n  return clone;\n}\nfunction getPrototypes(source) {\n  const prototypes = [];\n  let current = source;\n  while (current = Object.getPrototypeOf(current)) {\n    prototypes.push(current);\n  }\n  return prototypes;\n}\nfunction inheritProperties(source, target) {\n  const properties = [\n    ...Object.getOwnPropertyNames(source),\n    ...Object.getOwnPropertySymbols(source)\n  ];\n  for (const property of properties) {\n    if (target.hasOwnProperty(property)) {\n      continue;\n    }\n    const descriptor = Object.getOwnPropertyDescriptor(source, property);\n    if (!descriptor) {\n      continue;\n    }\n    Object.defineProperty(target, property, descriptor);\n  }\n}\n\n// src/interceptors/ClientRequest/utils/createResponse.ts\nfunction createResponse(message) {\n  const responseBodyOrNull = (0,_chunk_IBYBTTYK_mjs__WEBPACK_IMPORTED_MODULE_0__.isResponseWithoutBody)(message.statusCode || 200) ? null : new ReadableStream({\n    start(controller) {\n      message.on(\"data\", (chunk) => controller.enqueue(chunk));\n      message.on(\"end\", () => controller.close());\n    }\n  });\n  return new Response(responseBodyOrNull, {\n    status: message.statusCode,\n    statusText: message.statusMessage,\n    headers: createHeadersFromIncomingHttpHeaders(message.headers)\n  });\n}\nfunction createHeadersFromIncomingHttpHeaders(httpHeaders) {\n  const headers = new Headers();\n  for (const headerName in httpHeaders) {\n    const headerValues = httpHeaders[headerName];\n    if (typeof headerValues === \"undefined\") {\n      continue;\n    }\n    if (Array.isArray(headerValues)) {\n      headerValues.forEach((headerValue) => {\n        headers.append(headerName, headerValue);\n      });\n      continue;\n    }\n    headers.set(headerName, headerValues);\n  }\n  return headers;\n}\n\n// src/interceptors/ClientRequest/utils/createRequest.ts\nfunction createRequest(clientRequest) {\n  const headers = new Headers();\n  const outgoingHeaders = clientRequest.getHeaders();\n  for (const headerName in outgoingHeaders) {\n    const headerValue = outgoingHeaders[headerName];\n    if (typeof headerValue === \"undefined\") {\n      continue;\n    }\n    const valuesList = Array.prototype.concat([], headerValue);\n    for (const value of valuesList) {\n      headers.append(headerName, value.toString());\n    }\n  }\n  if (clientRequest.url.username || clientRequest.url.password) {\n    const auth = `${clientRequest.url.username || \"\"}:${clientRequest.url.password || \"\"}`;\n    headers.set(\"Authorization\", `Basic ${btoa(auth)}`);\n    clientRequest.url.username = \"\";\n    clientRequest.url.password = \"\";\n  }\n  const method = clientRequest.method || \"GET\";\n  return new Request(clientRequest.url, {\n    method,\n    headers,\n    credentials: \"same-origin\",\n    body: method === \"HEAD\" || method === \"GET\" ? null : clientRequest.requestBuffer\n  });\n}\n\n// src/utils/getValueBySymbol.ts\nfunction getValueBySymbol(symbolName, source) {\n  const ownSymbols = Object.getOwnPropertySymbols(source);\n  const symbol = ownSymbols.find((symbol2) => {\n    return symbol2.description === symbolName;\n  });\n  if (symbol) {\n    return Reflect.get(source, symbol);\n  }\n  return;\n}\n\n// src/utils/isObject.ts\nfunction isObject(value) {\n  return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n\n// src/utils/getRawFetchHeaders.ts\nfunction getRawFetchHeaders(headers) {\n  const headersList = getValueBySymbol(\"headers list\", headers);\n  if (!headersList) {\n    return;\n  }\n  const headersMap = getValueBySymbol(\"headers map\", headersList);\n  if (!headersMap || !isHeadersMapWithRawHeaderNames(headersMap)) {\n    return;\n  }\n  const rawHeaders = /* @__PURE__ */ new Map();\n  headersMap.forEach(({ name, value }) => {\n    rawHeaders.set(name, value);\n  });\n  return rawHeaders;\n}\nfunction isHeadersMapWithRawHeaderNames(headersMap) {\n  return Array.from(\n    headersMap.values()\n  ).every((value) => {\n    return isObject(value) && \"name\" in value;\n  });\n}\n\n// src/interceptors/ClientRequest/NodeClientRequest.ts\nvar _NodeClientRequest = class extends http__WEBPACK_IMPORTED_MODULE_4__.ClientRequest {\n  constructor([url, requestOptions, callback], options) {\n    super(requestOptions, callback);\n    this.chunks = [];\n    this.logger = options.logger.extend(\n      `request ${requestOptions.method} ${url.href}`\n    );\n    this.logger.info(\"constructing ClientRequest using options:\", {\n      url,\n      requestOptions,\n      callback\n    });\n    this.state = 0 /* Idle */;\n    this.url = url;\n    this.emitter = options.emitter;\n    this.requestBuffer = null;\n    this.response = new http__WEBPACK_IMPORTED_MODULE_4__.IncomingMessage(this.socket);\n  }\n  writeRequestBodyChunk(chunk, encoding) {\n    if (chunk == null) {\n      return;\n    }\n    if (this.requestBuffer == null) {\n      this.requestBuffer = Buffer.from([]);\n    }\n    const resolvedChunk = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n    this.requestBuffer = Buffer.concat([this.requestBuffer, resolvedChunk]);\n  }\n  write(...args) {\n    var _a;\n    const [chunk, encoding, callback] = normalizeClientRequestWriteArgs(args);\n    this.logger.info(\"write:\", { chunk, encoding, callback });\n    this.chunks.push({ chunk, encoding });\n    this.writeRequestBodyChunk(chunk, encoding);\n    this.logger.info(\n      \"chunk successfully stored!\",\n      (_a = this.requestBuffer) == null ? void 0 : _a.byteLength\n    );\n    if (!chunk || chunk.length === 0) {\n      this.logger.info(\"written chunk is empty, skipping callback...\");\n    } else {\n      callback == null ? void 0 : callback();\n    }\n    return true;\n  }\n  end(...args) {\n    this.logger.info(\"end\", args);\n    const requestId = (0,_chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_3__.createRequestId)();\n    const [chunk, encoding, callback] = normalizeClientRequestEndArgs(...args);\n    this.logger.info(\"normalized arguments:\", { chunk, encoding, callback });\n    this.writeRequestBodyChunk(chunk, encoding || void 0);\n    this.state = 2 /* Sent */;\n    const capturedRequest = createRequest(this);\n    const { interactiveRequest, requestController } = (0,_chunk_OUWBQF3Z_mjs__WEBPACK_IMPORTED_MODULE_2__.toInteractiveRequest)(capturedRequest);\n    Object.defineProperty(capturedRequest, \"respondWith\", {\n      value: requestController.respondWith.bind(requestController)\n    });\n    if (this.hasHeader(_chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_3__.INTERNAL_REQUEST_ID_HEADER_NAME)) {\n      this.removeHeader(_chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_3__.INTERNAL_REQUEST_ID_HEADER_NAME);\n      return this.passthrough(chunk, encoding, callback);\n    }\n    this.emitter.once(\"request\", ({ requestId: pendingRequestId }) => {\n      if (pendingRequestId !== requestId) {\n        return;\n      }\n      if (requestController.responsePromise.state === \"pending\") {\n        this.logger.info(\n          \"request has not been handled in listeners, executing fail-safe listener...\"\n        );\n        requestController.responsePromise.resolve(void 0);\n      }\n    });\n    (0,_open_draft_until__WEBPACK_IMPORTED_MODULE_6__.until)(async () => {\n      this.logger.info(\n        'emitting the \"request\" event for %d listener(s)...',\n        this.emitter.listenerCount(\"request\")\n      );\n      this.state = 3 /* MockLookupStart */;\n      await (0,_chunk_OUWBQF3Z_mjs__WEBPACK_IMPORTED_MODULE_2__.emitAsync)(this.emitter, \"request\", {\n        request: interactiveRequest,\n        requestId\n      });\n      this.logger.info('all \"request\" listeners done!');\n      const mockedResponse = await requestController.responsePromise;\n      this.logger.info(\"event.respondWith called with:\", mockedResponse);\n      return mockedResponse;\n    }).then((resolverResult) => {\n      this.logger.info(\"the listeners promise awaited!\");\n      this.state = 4 /* MockLookupEnd */;\n      if (!this.headersSent) {\n        for (const [headerName, headerValue] of capturedRequest.headers) {\n          this.setHeader(headerName, headerValue);\n        }\n      }\n      if (resolverResult.error) {\n        this.logger.info(\n          \"encountered resolver exception, aborting request...\",\n          resolverResult.error\n        );\n        this.destroyed = true;\n        this.emit(\"error\", resolverResult.error);\n        this.terminate();\n        return this;\n      }\n      const mockedResponse = resolverResult.data;\n      if (mockedResponse) {\n        this.logger.info(\n          \"received mocked response:\",\n          mockedResponse.status,\n          mockedResponse.statusText\n        );\n        this.destroyed = false;\n        if (\n          /**\n           * @note Some environments, like Miniflare (Cloudflare) do not\n           * implement the \"Response.type\" property and throw on its access.\n           * Safely check if we can access \"type\" on \"Response\" before continuing.\n           * @see https://github.com/mswjs/msw/issues/1834\n           */\n          (0,_chunk_DERTLGL3_mjs__WEBPACK_IMPORTED_MODULE_1__.isPropertyAccessible)(mockedResponse, \"type\") && mockedResponse.type === \"error\"\n        ) {\n          this.logger.info(\n            \"received network error response, aborting request...\"\n          );\n          this.emit(\"error\", new TypeError(\"Network error\"));\n          this.terminate();\n          return this;\n        }\n        const responseClone = mockedResponse.clone();\n        this.respondWith(mockedResponse);\n        this.logger.info(\n          mockedResponse.status,\n          mockedResponse.statusText,\n          \"(MOCKED)\"\n        );\n        callback == null ? void 0 : callback();\n        this.logger.info('emitting the custom \"response\" event...');\n        this.emitter.emit(\"response\", {\n          response: responseClone,\n          isMockedResponse: true,\n          request: capturedRequest,\n          requestId\n        });\n        this.logger.info(\"request (mock) is completed\");\n        return this;\n      }\n      this.logger.info(\"no mocked response received!\");\n      this.once(\"response-internal\", (message) => {\n        this.logger.info(message.statusCode, message.statusMessage);\n        this.logger.info(\"original response headers:\", message.headers);\n        this.logger.info('emitting the custom \"response\" event...');\n        this.emitter.emit(\"response\", {\n          response: createResponse(message),\n          isMockedResponse: false,\n          request: capturedRequest,\n          requestId\n        });\n      });\n      return this.passthrough(chunk, encoding, callback);\n    });\n    return this;\n  }\n  emit(event, ...data) {\n    this.logger.info(\"emit: %s\", event);\n    if (event === \"response\") {\n      this.logger.info('found \"response\" event, cloning the response...');\n      try {\n        const response = data[0];\n        const firstClone = cloneIncomingMessage(response);\n        const secondClone = cloneIncomingMessage(response);\n        this.emit(\"response-internal\", secondClone);\n        this.logger.info(\n          'response successfully cloned, emitting \"response\" event...'\n        );\n        return super.emit(event, firstClone, ...data.slice(1));\n      } catch (error) {\n        this.logger.info(\"error when cloning response:\", error);\n        return super.emit(event, ...data);\n      }\n    }\n    if (event === \"error\") {\n      const error = data[0];\n      const errorCode = error.code || \"\";\n      this.logger.info(\"error:\\n\", error);\n      if (_NodeClientRequest.suppressErrorCodes.includes(errorCode)) {\n        if (this.state < 4 /* MockLookupEnd */) {\n          if (!this.capturedError) {\n            this.capturedError = error;\n            this.logger.info(\"captured the first error:\", this.capturedError);\n          }\n          return false;\n        }\n        if (this.state === 5 /* ResponseReceived */ && this.responseType === \"mock\") {\n          return false;\n        }\n      }\n    }\n    return super.emit(event, ...data);\n  }\n  /**\n   * Performs the intercepted request as-is.\n   * Replays the captured request body chunks,\n   * still emits the internal events, and wraps\n   * up the request with `super.end()`.\n   */\n  passthrough(chunk, encoding, callback) {\n    this.state = 5 /* ResponseReceived */;\n    this.responseType = \"passthrough\";\n    if (this.capturedError) {\n      this.emit(\"error\", this.capturedError);\n      return this;\n    }\n    this.logger.info(\"writing request chunks...\", this.chunks);\n    for (const { chunk: chunk2, encoding: encoding2 } of this.chunks) {\n      if (encoding2) {\n        super.write(chunk2, encoding2);\n      } else {\n        super.write(chunk2);\n      }\n    }\n    this.once(\"error\", (error) => {\n      this.logger.info(\"original request error:\", error);\n    });\n    this.once(\"abort\", () => {\n      this.logger.info(\"original request aborted!\");\n    });\n    this.once(\"response-internal\", (message) => {\n      this.logger.info(message.statusCode, message.statusMessage);\n      this.logger.info(\"original response headers:\", message.headers);\n    });\n    this.logger.info(\"performing original request...\");\n    return super.end(...[chunk, encoding, callback].filter(Boolean));\n  }\n  /**\n   * Responds to this request instance using a mocked response.\n   */\n  respondWith(mockedResponse) {\n    this.logger.info(\"responding with a mocked response...\", mockedResponse);\n    this.state = 5 /* ResponseReceived */;\n    this.responseType = \"mock\";\n    Object.defineProperties(this, {\n      writableFinished: { value: true },\n      writableEnded: { value: true }\n    });\n    this.emit(\"finish\");\n    const { status, statusText, headers, body } = mockedResponse;\n    this.response.statusCode = status;\n    this.response.statusMessage = statusText;\n    const rawHeaders = getRawFetchHeaders(headers) || headers;\n    if (rawHeaders) {\n      this.response.headers = {};\n      rawHeaders.forEach((headerValue, headerName) => {\n        this.response.rawHeaders.push(headerName, headerValue);\n        const insensitiveHeaderName = headerName.toLowerCase();\n        const prevHeaders = this.response.headers[insensitiveHeaderName];\n        this.response.headers[insensitiveHeaderName] = prevHeaders ? Array.prototype.concat([], prevHeaders, headerValue) : headerValue;\n      });\n    }\n    this.logger.info(\"mocked response headers ready:\", headers);\n    this.res = this.response;\n    this.emit(\"response\", this.response);\n    const isResponseStreamFinished = new _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_7__.DeferredPromise();\n    const finishResponseStream = () => {\n      this.logger.info(\"finished response stream!\");\n      this.response.push(null);\n      this.response.complete = true;\n      isResponseStreamFinished.resolve();\n    };\n    if (body) {\n      const bodyReader = body.getReader();\n      const readNextChunk = async () => {\n        const { done, value } = await bodyReader.read();\n        if (done) {\n          finishResponseStream();\n          return;\n        }\n        this.response.emit(\"data\", value);\n        return readNextChunk();\n      };\n      readNextChunk();\n    } else {\n      finishResponseStream();\n    }\n    isResponseStreamFinished.then(() => {\n      this.logger.info(\"finalizing response...\");\n      this.response.emit(\"end\");\n      this.terminate();\n      this.logger.info(\"request complete!\");\n    });\n  }\n  /**\n   * Terminates a pending request.\n   */\n  terminate() {\n    var _a;\n    (_a = this.agent) == null ? void 0 : _a.destroy();\n  }\n};\nvar NodeClientRequest = _NodeClientRequest;\n/**\n * The list of internal Node.js errors to suppress while\n * using the \"mock\" response source.\n */\nNodeClientRequest.suppressErrorCodes = [\n  \"ENOTFOUND\",\n  \"ECONNREFUSED\",\n  \"ECONNRESET\",\n  \"EAI_AGAIN\",\n  \"ENETUNREACH\",\n  \"EHOSTUNREACH\"\n];\n\n// src/interceptors/ClientRequest/utils/normalizeClientRequestArgs.ts\n\n\n\n\n\n// src/utils/getRequestOptionsByUrl.ts\nfunction getRequestOptionsByUrl(url) {\n  const options = {\n    method: \"GET\",\n    protocol: url.protocol,\n    hostname: typeof url.hostname === \"string\" && url.hostname.startsWith(\"[\") ? url.hostname.slice(1, -1) : url.hostname,\n    host: url.host,\n    path: `${url.pathname}${url.search || \"\"}`\n  };\n  if (!!url.port) {\n    options.port = Number(url.port);\n  }\n  if (url.username || url.password) {\n    options.auth = `${url.username}:${url.password}`;\n  }\n  return options;\n}\n\n// src/utils/getUrlByRequestOptions.ts\n\n\nvar logger3 = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_8__.Logger(\"utils getUrlByRequestOptions\");\nvar DEFAULT_PATH = \"/\";\nvar DEFAULT_PROTOCOL = \"http:\";\nvar DEFAULT_HOST = \"localhost\";\nvar SSL_PORT = 443;\nfunction getAgent(options) {\n  return options.agent instanceof http__WEBPACK_IMPORTED_MODULE_4__.Agent ? options.agent : void 0;\n}\nfunction getProtocolByRequestOptions(options) {\n  var _a;\n  if (options.protocol) {\n    return options.protocol;\n  }\n  const agent = getAgent(options);\n  const agentProtocol = agent == null ? void 0 : agent.protocol;\n  if (agentProtocol) {\n    return agentProtocol;\n  }\n  const port = getPortByRequestOptions(options);\n  const isSecureRequest = options.cert || port === SSL_PORT;\n  return isSecureRequest ? \"https:\" : ((_a = options.uri) == null ? void 0 : _a.protocol) || DEFAULT_PROTOCOL;\n}\nfunction getPortByRequestOptions(options) {\n  if (options.port) {\n    return Number(options.port);\n  }\n  if (options.hostname != null) {\n    const [, extractedPort] = options.hostname.match(/:(\\d+)$/) || [];\n    if (extractedPort != null) {\n      return Number(extractedPort);\n    }\n  }\n  const agent = getAgent(options);\n  if (agent == null ? void 0 : agent.options.port) {\n    return Number(agent.options.port);\n  }\n  if (agent == null ? void 0 : agent.defaultPort) {\n    return Number(agent.defaultPort);\n  }\n  return void 0;\n}\nfunction getHostByRequestOptions(options) {\n  const { hostname, host } = options;\n  if (hostname != null) {\n    return hostname.replace(/:\\d+$/, \"\");\n  }\n  return host || DEFAULT_HOST;\n}\nfunction getAuthByRequestOptions(options) {\n  if (options.auth) {\n    const [username, password] = options.auth.split(\":\");\n    return { username, password };\n  }\n}\nfunction isRawIPv6Address(host) {\n  return host.includes(\":\") && !host.startsWith(\"[\") && !host.endsWith(\"]\");\n}\nfunction getHostname(host, port) {\n  const portString = typeof port !== \"undefined\" ? `:${port}` : \"\";\n  if (isRawIPv6Address(host)) {\n    return `[${host}]${portString}`;\n  }\n  if (typeof port === \"undefined\") {\n    return host;\n  }\n  return `${host}${portString}`;\n}\nfunction getUrlByRequestOptions(options) {\n  logger3.info(\"request options\", options);\n  if (options.uri) {\n    logger3.info(\n      'constructing url from explicitly provided \"options.uri\": %s',\n      options.uri\n    );\n    return new URL(options.uri.href);\n  }\n  logger3.info(\"figuring out url from request options...\");\n  const protocol = getProtocolByRequestOptions(options);\n  logger3.info(\"protocol\", protocol);\n  const host = getHostByRequestOptions(options);\n  logger3.info(\"host\", host);\n  const port = getPortByRequestOptions(options);\n  logger3.info(\"port\", port);\n  const hostname = getHostname(host, port);\n  logger3.info(\"hostname\", hostname);\n  const path = options.path || DEFAULT_PATH;\n  logger3.info(\"path\", path);\n  const credentials = getAuthByRequestOptions(options);\n  logger3.info(\"credentials\", credentials);\n  const authString = credentials ? `${credentials.username}:${credentials.password}@` : \"\";\n  logger3.info(\"auth string:\", authString);\n  const url = new URL(`${protocol}//${hostname}${path}`);\n  url.username = (credentials == null ? void 0 : credentials.username) || \"\";\n  url.password = (credentials == null ? void 0 : credentials.password) || \"\";\n  logger3.info(\"created url:\", url);\n  return url;\n}\n\n// src/utils/cloneObject.ts\n\nvar logger4 = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_8__.Logger(\"cloneObject\");\nfunction isPlainObject(obj) {\n  var _a;\n  logger4.info(\"is plain object?\", obj);\n  if (obj == null || !((_a = obj.constructor) == null ? void 0 : _a.name)) {\n    logger4.info(\"given object is undefined, not a plain object...\");\n    return false;\n  }\n  logger4.info(\"checking the object constructor:\", obj.constructor.name);\n  return obj.constructor.name === \"Object\";\n}\nfunction cloneObject(obj) {\n  logger4.info(\"cloning object:\", obj);\n  const enumerableProperties = Object.entries(obj).reduce(\n    (acc, [key, value]) => {\n      logger4.info(\"analyzing key-value pair:\", key, value);\n      acc[key] = isPlainObject(value) ? cloneObject(value) : value;\n      return acc;\n    },\n    {}\n  );\n  return isPlainObject(obj) ? enumerableProperties : Object.assign(Object.getPrototypeOf(obj), enumerableProperties);\n}\n\n// src/interceptors/ClientRequest/utils/normalizeClientRequestArgs.ts\nvar logger5 = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_8__.Logger(\"http normalizeClientRequestArgs\");\nfunction resolveRequestOptions(args, url) {\n  if (typeof args[1] === \"undefined\" || typeof args[1] === \"function\") {\n    logger5.info(\"request options not provided, deriving from the url\", url);\n    return getRequestOptionsByUrl(url);\n  }\n  if (args[1]) {\n    logger5.info(\"has custom RequestOptions!\", args[1]);\n    const requestOptionsFromUrl = getRequestOptionsByUrl(url);\n    logger5.info(\"derived RequestOptions from the URL:\", requestOptionsFromUrl);\n    logger5.info(\"cloning RequestOptions...\");\n    const clonedRequestOptions = cloneObject(args[1]);\n    logger5.info(\"successfully cloned RequestOptions!\", clonedRequestOptions);\n    return {\n      ...requestOptionsFromUrl,\n      ...clonedRequestOptions\n    };\n  }\n  logger5.info(\"using an empty object as request options\");\n  return {};\n}\nfunction overrideUrlByRequestOptions(url, options) {\n  url.host = options.host || url.host;\n  url.hostname = options.hostname || url.hostname;\n  url.port = options.port ? options.port.toString() : url.port;\n  if (options.path) {\n    const parsedOptionsPath = (0,url__WEBPACK_IMPORTED_MODULE_10__.parse)(options.path, false);\n    url.pathname = parsedOptionsPath.pathname || \"\";\n    url.search = parsedOptionsPath.search || \"\";\n  }\n  return url;\n}\nfunction resolveCallback(args) {\n  return typeof args[1] === \"function\" ? args[1] : args[2];\n}\nfunction normalizeClientRequestArgs(defaultProtocol, ...args) {\n  let url;\n  let options;\n  let callback;\n  logger5.info(\"arguments\", args);\n  logger5.info(\"using default protocol:\", defaultProtocol);\n  if (args.length === 0) {\n    const url2 = new URL(\"http://localhost\");\n    const options2 = resolveRequestOptions(args, url2);\n    return [url2, options2];\n  }\n  if (typeof args[0] === \"string\") {\n    logger5.info(\"first argument is a location string:\", args[0]);\n    url = new URL(args[0]);\n    logger5.info(\"created a url:\", url);\n    const requestOptionsFromUrl = getRequestOptionsByUrl(url);\n    logger5.info(\"request options from url:\", requestOptionsFromUrl);\n    options = resolveRequestOptions(args, url);\n    logger5.info(\"resolved request options:\", options);\n    callback = resolveCallback(args);\n  } else if (args[0] instanceof URL) {\n    url = args[0];\n    logger5.info(\"first argument is a URL:\", url);\n    if (typeof args[1] !== \"undefined\" && isObject(args[1])) {\n      url = overrideUrlByRequestOptions(url, args[1]);\n    }\n    options = resolveRequestOptions(args, url);\n    logger5.info(\"derived request options:\", options);\n    callback = resolveCallback(args);\n  } else if (\"hash\" in args[0] && !(\"method\" in args[0])) {\n    const [legacyUrl] = args;\n    logger5.info(\"first argument is a legacy URL:\", legacyUrl);\n    if (legacyUrl.hostname === null) {\n      logger5.info(\"given legacy URL is relative (no hostname)\");\n      return isObject(args[1]) ? normalizeClientRequestArgs(\n        defaultProtocol,\n        { path: legacyUrl.path, ...args[1] },\n        args[2]\n      ) : normalizeClientRequestArgs(\n        defaultProtocol,\n        { path: legacyUrl.path },\n        args[1]\n      );\n    }\n    logger5.info(\"given legacy url is absolute\");\n    const resolvedUrl = new URL(legacyUrl.href);\n    return args[1] === void 0 ? normalizeClientRequestArgs(defaultProtocol, resolvedUrl) : typeof args[1] === \"function\" ? normalizeClientRequestArgs(defaultProtocol, resolvedUrl, args[1]) : normalizeClientRequestArgs(\n      defaultProtocol,\n      resolvedUrl,\n      args[1],\n      args[2]\n    );\n  } else if (isObject(args[0])) {\n    options = args[0];\n    logger5.info(\"first argument is RequestOptions:\", options);\n    options.protocol = options.protocol || defaultProtocol;\n    logger5.info(\"normalized request options:\", options);\n    url = getUrlByRequestOptions(options);\n    logger5.info(\"created a URL from RequestOptions:\", url.href);\n    callback = resolveCallback(args);\n  } else {\n    throw new Error(\n      `Failed to construct ClientRequest with these parameters: ${args}`\n    );\n  }\n  options.protocol = options.protocol || url.protocol;\n  options.method = options.method || \"GET\";\n  if (typeof options.agent === \"undefined\") {\n    const agent = options.protocol === \"https:\" ? new https__WEBPACK_IMPORTED_MODULE_5__.Agent({\n      rejectUnauthorized: options.rejectUnauthorized\n    }) : new http__WEBPACK_IMPORTED_MODULE_4__.Agent();\n    options.agent = agent;\n    logger5.info(\"resolved fallback agent:\", agent);\n  }\n  if (!options._defaultAgent) {\n    logger5.info(\n      'has no default agent, setting the default agent for \"%s\"',\n      options.protocol\n    );\n    options._defaultAgent = options.protocol === \"https:\" ? https__WEBPACK_IMPORTED_MODULE_5__.globalAgent : http__WEBPACK_IMPORTED_MODULE_4__.globalAgent;\n  }\n  logger5.info(\"successfully resolved url:\", url.href);\n  logger5.info(\"successfully resolved options:\", options);\n  logger5.info(\"successfully resolved callback:\", callback);\n  return [url, options, callback];\n}\n\n// src/interceptors/ClientRequest/http.get.ts\nfunction get(protocol, options) {\n  return function interceptorsHttpGet(...args) {\n    const clientRequestArgs = normalizeClientRequestArgs(\n      `${protocol}:`,\n      ...args\n    );\n    const request2 = new NodeClientRequest(clientRequestArgs, options);\n    request2.end();\n    return request2;\n  };\n}\n\n// src/interceptors/ClientRequest/http.request.ts\n\nvar logger6 = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_8__.Logger(\"http request\");\nfunction request(protocol, options) {\n  return function interceptorsHttpRequest(...args) {\n    logger6.info('request call (protocol \"%s\"):', protocol, args);\n    const clientRequestArgs = normalizeClientRequestArgs(\n      `${protocol}:`,\n      ...args\n    );\n    return new NodeClientRequest(clientRequestArgs, options);\n  };\n}\n\n// src/interceptors/ClientRequest/index.ts\nvar _ClientRequestInterceptor = class extends _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_3__.Interceptor {\n  constructor() {\n    super(_ClientRequestInterceptor.interceptorSymbol);\n    this.modules = /* @__PURE__ */ new Map();\n    this.modules.set(\"http\", http__WEBPACK_IMPORTED_MODULE_4__);\n    this.modules.set(\"https\", https__WEBPACK_IMPORTED_MODULE_5__);\n  }\n  setup() {\n    const logger7 = this.logger.extend(\"setup\");\n    for (const [protocol, requestModule] of this.modules) {\n      const { request: pureRequest, get: pureGet } = requestModule;\n      this.subscriptions.push(() => {\n        requestModule.request = pureRequest;\n        requestModule.get = pureGet;\n        logger7.info('native \"%s\" module restored!', protocol);\n      });\n      const options = {\n        emitter: this.emitter,\n        logger: this.logger\n      };\n      requestModule.request = // Force a line break.\n      request(protocol, options);\n      requestModule.get = // Force a line break.\n      get(protocol, options);\n      logger7.info('native \"%s\" module patched!', protocol);\n    }\n  }\n};\nvar ClientRequestInterceptor = _ClientRequestInterceptor;\nClientRequestInterceptor.interceptorSymbol = Symbol(\"http\");\n\n\n//# sourceMappingURL=chunk-CCASONWB.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-CCASONWB.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-DERTLGL3.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-DERTLGL3.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPropertyAccessible: () => (/* binding */ isPropertyAccessible)\n/* harmony export */ });\n// src/utils/isPropertyAccessible.ts\nfunction isPropertyAccessible(obj, key) {\n  try {\n    obj[key];\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n\n//# sourceMappingURL=chunk-DERTLGL3.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay1ERVJUTEdMMy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUlFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZW1vLWxvZ2luLy4vbm9kZV9tb2R1bGVzL0Btc3dqcy9pbnRlcmNlcHRvcnMvbGliL25vZGUvY2h1bmstREVSVExHTDMubWpzPzdiZDAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3V0aWxzL2lzUHJvcGVydHlBY2Nlc3NpYmxlLnRzXG5mdW5jdGlvbiBpc1Byb3BlcnR5QWNjZXNzaWJsZShvYmosIGtleSkge1xuICB0cnkge1xuICAgIG9ialtrZXldO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIGlzUHJvcGVydHlBY2Nlc3NpYmxlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstREVSVExHTDMubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-DERTLGL3.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-GUY7XK43.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-GUY7XK43.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchInterceptor: () => (/* binding */ BatchInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-QED3Q6Z2.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-QED3Q6Z2.mjs\");\n\n\n// src/BatchInterceptor.ts\nvar BatchInterceptor = class extends _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_0__.Interceptor {\n  constructor(options) {\n    BatchInterceptor.symbol = Symbol(options.name);\n    super(BatchInterceptor.symbol);\n    this.interceptors = options.interceptors;\n  }\n  setup() {\n    const logger = this.logger.extend(\"setup\");\n    logger.info(\"applying all %d interceptors...\", this.interceptors.length);\n    for (const interceptor of this.interceptors) {\n      logger.info('applying \"%s\" interceptor...', interceptor.constructor.name);\n      interceptor.apply();\n      logger.info(\"adding interceptor dispose subscription\");\n      this.subscriptions.push(() => interceptor.dispose());\n    }\n  }\n  on(event, listener) {\n    for (const interceptor of this.interceptors) {\n      interceptor.on(event, listener);\n    }\n    return this;\n  }\n  once(event, listener) {\n    for (const interceptor of this.interceptors) {\n      interceptor.once(event, listener);\n    }\n    return this;\n  }\n  off(event, listener) {\n    for (const interceptor of this.interceptors) {\n      interceptor.off(event, listener);\n    }\n    return this;\n  }\n  removeAllListeners(event) {\n    for (const interceptors of this.interceptors) {\n      interceptors.removeAllListeners(event);\n    }\n    return this;\n  }\n};\n\n\n//# sourceMappingURL=chunk-GUY7XK43.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay1HVVk3WEs0My5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFOEI7O0FBRTlCO0FBQ0EscUNBQXFDLDREQUFXO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZW1vLWxvZ2luLy4vbm9kZV9tb2R1bGVzL0Btc3dqcy9pbnRlcmNlcHRvcnMvbGliL25vZGUvY2h1bmstR1VZN1hLNDMubWpzPzhiMDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSW50ZXJjZXB0b3Jcbn0gZnJvbSBcIi4vY2h1bmstUUVEM1E2WjIubWpzXCI7XG5cbi8vIHNyYy9CYXRjaEludGVyY2VwdG9yLnRzXG52YXIgQmF0Y2hJbnRlcmNlcHRvciA9IGNsYXNzIGV4dGVuZHMgSW50ZXJjZXB0b3Ige1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgQmF0Y2hJbnRlcmNlcHRvci5zeW1ib2wgPSBTeW1ib2wob3B0aW9ucy5uYW1lKTtcbiAgICBzdXBlcihCYXRjaEludGVyY2VwdG9yLnN5bWJvbCk7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMgPSBvcHRpb25zLmludGVyY2VwdG9ycztcbiAgfVxuICBzZXR1cCgpIHtcbiAgICBjb25zdCBsb2dnZXIgPSB0aGlzLmxvZ2dlci5leHRlbmQoXCJzZXR1cFwiKTtcbiAgICBsb2dnZXIuaW5mbyhcImFwcGx5aW5nIGFsbCAlZCBpbnRlcmNlcHRvcnMuLi5cIiwgdGhpcy5pbnRlcmNlcHRvcnMubGVuZ3RoKTtcbiAgICBmb3IgKGNvbnN0IGludGVyY2VwdG9yIG9mIHRoaXMuaW50ZXJjZXB0b3JzKSB7XG4gICAgICBsb2dnZXIuaW5mbygnYXBwbHlpbmcgXCIlc1wiIGludGVyY2VwdG9yLi4uJywgaW50ZXJjZXB0b3IuY29uc3RydWN0b3IubmFtZSk7XG4gICAgICBpbnRlcmNlcHRvci5hcHBseSgpO1xuICAgICAgbG9nZ2VyLmluZm8oXCJhZGRpbmcgaW50ZXJjZXB0b3IgZGlzcG9zZSBzdWJzY3JpcHRpb25cIik7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCgoKSA9PiBpbnRlcmNlcHRvci5kaXNwb3NlKCkpO1xuICAgIH1cbiAgfVxuICBvbihldmVudCwgbGlzdGVuZXIpIHtcbiAgICBmb3IgKGNvbnN0IGludGVyY2VwdG9yIG9mIHRoaXMuaW50ZXJjZXB0b3JzKSB7XG4gICAgICBpbnRlcmNlcHRvci5vbihldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBvbmNlKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgIGZvciAoY29uc3QgaW50ZXJjZXB0b3Igb2YgdGhpcy5pbnRlcmNlcHRvcnMpIHtcbiAgICAgIGludGVyY2VwdG9yLm9uY2UoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgb2ZmKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgIGZvciAoY29uc3QgaW50ZXJjZXB0b3Igb2YgdGhpcy5pbnRlcmNlcHRvcnMpIHtcbiAgICAgIGludGVyY2VwdG9yLm9mZihldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgICBmb3IgKGNvbnN0IGludGVyY2VwdG9ycyBvZiB0aGlzLmludGVyY2VwdG9ycykge1xuICAgICAgaW50ZXJjZXB0b3JzLnJlbW92ZUFsbExpc3RlbmVycyhldmVudCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuXG5leHBvcnQge1xuICBCYXRjaEludGVyY2VwdG9yXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstR1VZN1hLNDMubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-GUY7XK43.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-HAGW22AN.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-HAGW22AN.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IS_PATCHED_MODULE: () => (/* binding */ IS_PATCHED_MODULE)\n/* harmony export */ });\n// src/glossary.ts\nvar IS_PATCHED_MODULE = Symbol(\"isPatchedModule\");\n\n\n//# sourceMappingURL=chunk-HAGW22AN.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay1IQUdXMjJBTi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7O0FBSUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2RlbW8tbG9naW4vLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay1IQUdXMjJBTi5tanM/NzIxMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvZ2xvc3NhcnkudHNcbnZhciBJU19QQVRDSEVEX01PRFVMRSA9IFN5bWJvbChcImlzUGF0Y2hlZE1vZHVsZVwiKTtcblxuZXhwb3J0IHtcbiAgSVNfUEFUQ0hFRF9NT0RVTEVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1IQUdXMjJBTi5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-HAGW22AN.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-IBYBTTYK.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-IBYBTTYK.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isResponseWithoutBody: () => (/* binding */ isResponseWithoutBody)\n/* harmony export */ });\n// src/utils/responseUtils.ts\nvar RESPONSE_STATUS_CODES_WITHOUT_BODY = /* @__PURE__ */ new Set([\n  101,\n  103,\n  204,\n  205,\n  304\n]);\nfunction isResponseWithoutBody(status) {\n  return RESPONSE_STATUS_CODES_WITHOUT_BODY.has(status);\n}\n\n\n//# sourceMappingURL=chunk-IBYBTTYK.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay1JQllCVFRZSy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2RlbW8tbG9naW4vLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay1JQllCVFRZSy5tanM/NGYyYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvcmVzcG9uc2VVdGlscy50c1xudmFyIFJFU1BPTlNFX1NUQVRVU19DT0RFU19XSVRIT1VUX0JPRFkgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXG4gIDEwMSxcbiAgMTAzLFxuICAyMDQsXG4gIDIwNSxcbiAgMzA0XG5dKTtcbmZ1bmN0aW9uIGlzUmVzcG9uc2VXaXRob3V0Qm9keShzdGF0dXMpIHtcbiAgcmV0dXJuIFJFU1BPTlNFX1NUQVRVU19DT0RFU19XSVRIT1VUX0JPRFkuaGFzKHN0YXR1cyk7XG59XG5cbmV4cG9ydCB7XG4gIGlzUmVzcG9uc2VXaXRob3V0Qm9keVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLUlCWUJUVFlLLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-IBYBTTYK.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-OUWBQF3Z.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-OUWBQF3Z.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   emitAsync: () => (/* binding */ emitAsync),\n/* harmony export */   toInteractiveRequest: () => (/* binding */ toInteractiveRequest)\n/* harmony export */ });\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @open-draft/deferred-promise */ \"(ssr)/./node_modules/@open-draft/deferred-promise/build/index.mjs\");\n// src/utils/RequestController.ts\n\n\nvar RequestController = class {\n  constructor(request) {\n    this.request = request;\n    this.responsePromise = new _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_1__.DeferredPromise();\n  }\n  respondWith(response) {\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(\n      this.responsePromise.state === \"pending\",\n      'Failed to respond to \"%s %s\" request: the \"request\" event has already been responded to.',\n      this.request.method,\n      this.request.url\n    );\n    this.responsePromise.resolve(response);\n  }\n};\n\n// src/utils/toInteractiveRequest.ts\nfunction toInteractiveRequest(request) {\n  const requestController = new RequestController(request);\n  Reflect.set(\n    request,\n    \"respondWith\",\n    requestController.respondWith.bind(requestController)\n  );\n  return {\n    interactiveRequest: request,\n    requestController\n  };\n}\n\n// src/utils/emitAsync.ts\nasync function emitAsync(emitter, eventName, ...data) {\n  const listners = emitter.listeners(eventName);\n  if (listners.length === 0) {\n    return;\n  }\n  for (const listener of listners) {\n    await listener.apply(emitter, data);\n  }\n}\n\n\n//# sourceMappingURL=chunk-OUWBQF3Z.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay1PVVdCUUYzWi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ3VDO0FBQ3dCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBLCtCQUErQix5RUFBZTtBQUM5QztBQUNBO0FBQ0EsSUFBSSxxREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBS0U7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2RlbW8tbG9naW4vLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay1PVVdCUUYzWi5tanM/ZjkxYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvUmVxdWVzdENvbnRyb2xsZXIudHNcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCJvdXR2YXJpYW50XCI7XG5pbXBvcnQgeyBEZWZlcnJlZFByb21pc2UgfSBmcm9tIFwiQG9wZW4tZHJhZnQvZGVmZXJyZWQtcHJvbWlzZVwiO1xudmFyIFJlcXVlc3RDb250cm9sbGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihyZXF1ZXN0KSB7XG4gICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICB0aGlzLnJlc3BvbnNlUHJvbWlzZSA9IG5ldyBEZWZlcnJlZFByb21pc2UoKTtcbiAgfVxuICByZXNwb25kV2l0aChyZXNwb25zZSkge1xuICAgIGludmFyaWFudChcbiAgICAgIHRoaXMucmVzcG9uc2VQcm9taXNlLnN0YXRlID09PSBcInBlbmRpbmdcIixcbiAgICAgICdGYWlsZWQgdG8gcmVzcG9uZCB0byBcIiVzICVzXCIgcmVxdWVzdDogdGhlIFwicmVxdWVzdFwiIGV2ZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVzcG9uZGVkIHRvLicsXG4gICAgICB0aGlzLnJlcXVlc3QubWV0aG9kLFxuICAgICAgdGhpcy5yZXF1ZXN0LnVybFxuICAgICk7XG4gICAgdGhpcy5yZXNwb25zZVByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7XG4gIH1cbn07XG5cbi8vIHNyYy91dGlscy90b0ludGVyYWN0aXZlUmVxdWVzdC50c1xuZnVuY3Rpb24gdG9JbnRlcmFjdGl2ZVJlcXVlc3QocmVxdWVzdCkge1xuICBjb25zdCByZXF1ZXN0Q29udHJvbGxlciA9IG5ldyBSZXF1ZXN0Q29udHJvbGxlcihyZXF1ZXN0KTtcbiAgUmVmbGVjdC5zZXQoXG4gICAgcmVxdWVzdCxcbiAgICBcInJlc3BvbmRXaXRoXCIsXG4gICAgcmVxdWVzdENvbnRyb2xsZXIucmVzcG9uZFdpdGguYmluZChyZXF1ZXN0Q29udHJvbGxlcilcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBpbnRlcmFjdGl2ZVJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgcmVxdWVzdENvbnRyb2xsZXJcbiAgfTtcbn1cblxuLy8gc3JjL3V0aWxzL2VtaXRBc3luYy50c1xuYXN5bmMgZnVuY3Rpb24gZW1pdEFzeW5jKGVtaXR0ZXIsIGV2ZW50TmFtZSwgLi4uZGF0YSkge1xuICBjb25zdCBsaXN0bmVycyA9IGVtaXR0ZXIubGlzdGVuZXJzKGV2ZW50TmFtZSk7XG4gIGlmIChsaXN0bmVycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiBsaXN0bmVycykge1xuICAgIGF3YWl0IGxpc3RlbmVyLmFwcGx5KGVtaXR0ZXIsIGRhdGEpO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIHRvSW50ZXJhY3RpdmVSZXF1ZXN0LFxuICBlbWl0QXN5bmNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1PVVdCUUYzWi5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-OUWBQF3Z.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-QED3Q6Z2.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-QED3Q6Z2.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INTERNAL_REQUEST_ID_HEADER_NAME: () => (/* binding */ INTERNAL_REQUEST_ID_HEADER_NAME),\n/* harmony export */   Interceptor: () => (/* binding */ Interceptor),\n/* harmony export */   InterceptorReadyState: () => (/* binding */ InterceptorReadyState),\n/* harmony export */   createRequestId: () => (/* binding */ createRequestId),\n/* harmony export */   deleteGlobalSymbol: () => (/* binding */ deleteGlobalSymbol),\n/* harmony export */   getGlobalSymbol: () => (/* binding */ getGlobalSymbol)\n/* harmony export */ });\n/* harmony import */ var _open_draft_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @open-draft/logger */ \"(ssr)/./node_modules/@open-draft/logger/lib/index.mjs\");\n/* harmony import */ var strict_event_emitter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! strict-event-emitter */ \"(ssr)/./node_modules/strict-event-emitter/lib/index.mjs\");\n// src/Interceptor.ts\n\n\nvar INTERNAL_REQUEST_ID_HEADER_NAME = \"x-interceptors-internal-request-id\";\nfunction getGlobalSymbol(symbol) {\n  return (\n    // @ts-ignore https://github.com/Microsoft/TypeScript/issues/24587\n    globalThis[symbol] || void 0\n  );\n}\nfunction setGlobalSymbol(symbol, value) {\n  globalThis[symbol] = value;\n}\nfunction deleteGlobalSymbol(symbol) {\n  delete globalThis[symbol];\n}\nvar InterceptorReadyState = /* @__PURE__ */ ((InterceptorReadyState2) => {\n  InterceptorReadyState2[\"INACTIVE\"] = \"INACTIVE\";\n  InterceptorReadyState2[\"APPLYING\"] = \"APPLYING\";\n  InterceptorReadyState2[\"APPLIED\"] = \"APPLIED\";\n  InterceptorReadyState2[\"DISPOSING\"] = \"DISPOSING\";\n  InterceptorReadyState2[\"DISPOSED\"] = \"DISPOSED\";\n  return InterceptorReadyState2;\n})(InterceptorReadyState || {});\nvar Interceptor = class {\n  constructor(symbol) {\n    this.symbol = symbol;\n    this.readyState = \"INACTIVE\" /* INACTIVE */;\n    this.emitter = new strict_event_emitter__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n    this.subscriptions = [];\n    this.logger = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(symbol.description);\n    this.emitter.setMaxListeners(0);\n    this.logger.info(\"constructing the interceptor...\");\n  }\n  /**\n   * Determine if this interceptor can be applied\n   * in the current environment.\n   */\n  checkEnvironment() {\n    return true;\n  }\n  /**\n   * Apply this interceptor to the current process.\n   * Returns an already running interceptor instance if it's present.\n   */\n  apply() {\n    const logger = this.logger.extend(\"apply\");\n    logger.info(\"applying the interceptor...\");\n    if (this.readyState === \"APPLIED\" /* APPLIED */) {\n      logger.info(\"intercepted already applied!\");\n      return;\n    }\n    const shouldApply = this.checkEnvironment();\n    if (!shouldApply) {\n      logger.info(\"the interceptor cannot be applied in this environment!\");\n      return;\n    }\n    this.readyState = \"APPLYING\" /* APPLYING */;\n    const runningInstance = this.getInstance();\n    if (runningInstance) {\n      logger.info(\"found a running instance, reusing...\");\n      this.on = (event, listener) => {\n        logger.info('proxying the \"%s\" listener', event);\n        runningInstance.emitter.addListener(event, listener);\n        this.subscriptions.push(() => {\n          runningInstance.emitter.removeListener(event, listener);\n          logger.info('removed proxied \"%s\" listener!', event);\n        });\n        return this;\n      };\n      this.readyState = \"APPLIED\" /* APPLIED */;\n      return;\n    }\n    logger.info(\"no running instance found, setting up a new instance...\");\n    this.setup();\n    this.setInstance();\n    this.readyState = \"APPLIED\" /* APPLIED */;\n  }\n  /**\n   * Setup the module augments and stubs necessary for this interceptor.\n   * This method is not run if there's a running interceptor instance\n   * to prevent instantiating an interceptor multiple times.\n   */\n  setup() {\n  }\n  /**\n   * Listen to the interceptor's public events.\n   */\n  on(event, listener) {\n    const logger = this.logger.extend(\"on\");\n    if (this.readyState === \"DISPOSING\" /* DISPOSING */ || this.readyState === \"DISPOSED\" /* DISPOSED */) {\n      logger.info(\"cannot listen to events, already disposed!\");\n      return this;\n    }\n    logger.info('adding \"%s\" event listener:', event, listener);\n    this.emitter.on(event, listener);\n    return this;\n  }\n  once(event, listener) {\n    this.emitter.once(event, listener);\n    return this;\n  }\n  off(event, listener) {\n    this.emitter.off(event, listener);\n    return this;\n  }\n  removeAllListeners(event) {\n    this.emitter.removeAllListeners(event);\n    return this;\n  }\n  /**\n   * Disposes of any side-effects this interceptor has introduced.\n   */\n  dispose() {\n    const logger = this.logger.extend(\"dispose\");\n    if (this.readyState === \"DISPOSED\" /* DISPOSED */) {\n      logger.info(\"cannot dispose, already disposed!\");\n      return;\n    }\n    logger.info(\"disposing the interceptor...\");\n    this.readyState = \"DISPOSING\" /* DISPOSING */;\n    if (!this.getInstance()) {\n      logger.info(\"no interceptors running, skipping dispose...\");\n      return;\n    }\n    this.clearInstance();\n    logger.info(\"global symbol deleted:\", getGlobalSymbol(this.symbol));\n    if (this.subscriptions.length > 0) {\n      logger.info(\"disposing of %d subscriptions...\", this.subscriptions.length);\n      for (const dispose of this.subscriptions) {\n        dispose();\n      }\n      this.subscriptions = [];\n      logger.info(\"disposed of all subscriptions!\", this.subscriptions.length);\n    }\n    this.emitter.removeAllListeners();\n    logger.info(\"destroyed the listener!\");\n    this.readyState = \"DISPOSED\" /* DISPOSED */;\n  }\n  getInstance() {\n    var _a;\n    const instance = getGlobalSymbol(this.symbol);\n    this.logger.info(\"retrieved global instance:\", (_a = instance == null ? void 0 : instance.constructor) == null ? void 0 : _a.name);\n    return instance;\n  }\n  setInstance() {\n    setGlobalSymbol(this.symbol, this);\n    this.logger.info(\"set global instance!\", this.symbol.description);\n  }\n  clearInstance() {\n    deleteGlobalSymbol(this.symbol);\n    this.logger.info(\"cleared global instance!\", this.symbol.description);\n  }\n};\n\n// src/createRequestId.ts\nfunction createRequestId() {\n  return Math.random().toString(16).slice(2);\n}\n\n\n//# sourceMappingURL=chunk-QED3Q6Z2.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay1RRUQzUTZaMi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUM0QztBQUNHO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDZCQUE2QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix5REFBTztBQUM5QjtBQUNBLHNCQUFzQixzREFBTTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFTRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVtby1sb2dpbi8uL25vZGVfbW9kdWxlcy9AbXN3anMvaW50ZXJjZXB0b3JzL2xpYi9ub2RlL2NodW5rLVFFRDNRNloyLm1qcz8xNmNjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9JbnRlcmNlcHRvci50c1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBvcGVuLWRyYWZ0L2xvZ2dlclwiO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gXCJzdHJpY3QtZXZlbnQtZW1pdHRlclwiO1xudmFyIElOVEVSTkFMX1JFUVVFU1RfSURfSEVBREVSX05BTUUgPSBcIngtaW50ZXJjZXB0b3JzLWludGVybmFsLXJlcXVlc3QtaWRcIjtcbmZ1bmN0aW9uIGdldEdsb2JhbFN5bWJvbChzeW1ib2wpIHtcbiAgcmV0dXJuIChcbiAgICAvLyBAdHMtaWdub3JlIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMjQ1ODdcbiAgICBnbG9iYWxUaGlzW3N5bWJvbF0gfHwgdm9pZCAwXG4gICk7XG59XG5mdW5jdGlvbiBzZXRHbG9iYWxTeW1ib2woc3ltYm9sLCB2YWx1ZSkge1xuICBnbG9iYWxUaGlzW3N5bWJvbF0gPSB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGRlbGV0ZUdsb2JhbFN5bWJvbChzeW1ib2wpIHtcbiAgZGVsZXRlIGdsb2JhbFRoaXNbc3ltYm9sXTtcbn1cbnZhciBJbnRlcmNlcHRvclJlYWR5U3RhdGUgPSAvKiBAX19QVVJFX18gKi8gKChJbnRlcmNlcHRvclJlYWR5U3RhdGUyKSA9PiB7XG4gIEludGVyY2VwdG9yUmVhZHlTdGF0ZTJbXCJJTkFDVElWRVwiXSA9IFwiSU5BQ1RJVkVcIjtcbiAgSW50ZXJjZXB0b3JSZWFkeVN0YXRlMltcIkFQUExZSU5HXCJdID0gXCJBUFBMWUlOR1wiO1xuICBJbnRlcmNlcHRvclJlYWR5U3RhdGUyW1wiQVBQTElFRFwiXSA9IFwiQVBQTElFRFwiO1xuICBJbnRlcmNlcHRvclJlYWR5U3RhdGUyW1wiRElTUE9TSU5HXCJdID0gXCJESVNQT1NJTkdcIjtcbiAgSW50ZXJjZXB0b3JSZWFkeVN0YXRlMltcIkRJU1BPU0VEXCJdID0gXCJESVNQT1NFRFwiO1xuICByZXR1cm4gSW50ZXJjZXB0b3JSZWFkeVN0YXRlMjtcbn0pKEludGVyY2VwdG9yUmVhZHlTdGF0ZSB8fCB7fSk7XG52YXIgSW50ZXJjZXB0b3IgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHN5bWJvbCkge1xuICAgIHRoaXMuc3ltYm9sID0gc3ltYm9sO1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiSU5BQ1RJVkVcIiAvKiBJTkFDVElWRSAqLztcbiAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgIHRoaXMubG9nZ2VyID0gbmV3IExvZ2dlcihzeW1ib2wuZGVzY3JpcHRpb24pO1xuICAgIHRoaXMuZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoMCk7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhcImNvbnN0cnVjdGluZyB0aGUgaW50ZXJjZXB0b3IuLi5cIik7XG4gIH1cbiAgLyoqXG4gICAqIERldGVybWluZSBpZiB0aGlzIGludGVyY2VwdG9yIGNhbiBiZSBhcHBsaWVkXG4gICAqIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LlxuICAgKi9cbiAgY2hlY2tFbnZpcm9ubWVudCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQXBwbHkgdGhpcyBpbnRlcmNlcHRvciB0byB0aGUgY3VycmVudCBwcm9jZXNzLlxuICAgKiBSZXR1cm5zIGFuIGFscmVhZHkgcnVubmluZyBpbnRlcmNlcHRvciBpbnN0YW5jZSBpZiBpdCdzIHByZXNlbnQuXG4gICAqL1xuICBhcHBseSgpIHtcbiAgICBjb25zdCBsb2dnZXIgPSB0aGlzLmxvZ2dlci5leHRlbmQoXCJhcHBseVwiKTtcbiAgICBsb2dnZXIuaW5mbyhcImFwcGx5aW5nIHRoZSBpbnRlcmNlcHRvci4uLlwiKTtcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBcIkFQUExJRURcIiAvKiBBUFBMSUVEICovKSB7XG4gICAgICBsb2dnZXIuaW5mbyhcImludGVyY2VwdGVkIGFscmVhZHkgYXBwbGllZCFcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNob3VsZEFwcGx5ID0gdGhpcy5jaGVja0Vudmlyb25tZW50KCk7XG4gICAgaWYgKCFzaG91bGRBcHBseSkge1xuICAgICAgbG9nZ2VyLmluZm8oXCJ0aGUgaW50ZXJjZXB0b3IgY2Fubm90IGJlIGFwcGxpZWQgaW4gdGhpcyBlbnZpcm9ubWVudCFcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiQVBQTFlJTkdcIiAvKiBBUFBMWUlORyAqLztcbiAgICBjb25zdCBydW5uaW5nSW5zdGFuY2UgPSB0aGlzLmdldEluc3RhbmNlKCk7XG4gICAgaWYgKHJ1bm5pbmdJbnN0YW5jZSkge1xuICAgICAgbG9nZ2VyLmluZm8oXCJmb3VuZCBhIHJ1bm5pbmcgaW5zdGFuY2UsIHJldXNpbmcuLi5cIik7XG4gICAgICB0aGlzLm9uID0gKGV2ZW50LCBsaXN0ZW5lcikgPT4ge1xuICAgICAgICBsb2dnZXIuaW5mbygncHJveHlpbmcgdGhlIFwiJXNcIiBsaXN0ZW5lcicsIGV2ZW50KTtcbiAgICAgICAgcnVubmluZ0luc3RhbmNlLmVtaXR0ZXIuYWRkTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goKCkgPT4ge1xuICAgICAgICAgIHJ1bm5pbmdJbnN0YW5jZS5lbWl0dGVyLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgICAgbG9nZ2VyLmluZm8oJ3JlbW92ZWQgcHJveGllZCBcIiVzXCIgbGlzdGVuZXIhJywgZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9O1xuICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJBUFBMSUVEXCIgLyogQVBQTElFRCAqLztcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbG9nZ2VyLmluZm8oXCJubyBydW5uaW5nIGluc3RhbmNlIGZvdW5kLCBzZXR0aW5nIHVwIGEgbmV3IGluc3RhbmNlLi4uXCIpO1xuICAgIHRoaXMuc2V0dXAoKTtcbiAgICB0aGlzLnNldEluc3RhbmNlKCk7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gXCJBUFBMSUVEXCIgLyogQVBQTElFRCAqLztcbiAgfVxuICAvKipcbiAgICogU2V0dXAgdGhlIG1vZHVsZSBhdWdtZW50cyBhbmQgc3R1YnMgbmVjZXNzYXJ5IGZvciB0aGlzIGludGVyY2VwdG9yLlxuICAgKiBUaGlzIG1ldGhvZCBpcyBub3QgcnVuIGlmIHRoZXJlJ3MgYSBydW5uaW5nIGludGVyY2VwdG9yIGluc3RhbmNlXG4gICAqIHRvIHByZXZlbnQgaW5zdGFudGlhdGluZyBhbiBpbnRlcmNlcHRvciBtdWx0aXBsZSB0aW1lcy5cbiAgICovXG4gIHNldHVwKCkge1xuICB9XG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gdGhlIGludGVyY2VwdG9yJ3MgcHVibGljIGV2ZW50cy5cbiAgICovXG4gIG9uKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgIGNvbnN0IGxvZ2dlciA9IHRoaXMubG9nZ2VyLmV4dGVuZChcIm9uXCIpO1xuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFwiRElTUE9TSU5HXCIgLyogRElTUE9TSU5HICovIHx8IHRoaXMucmVhZHlTdGF0ZSA9PT0gXCJESVNQT1NFRFwiIC8qIERJU1BPU0VEICovKSB7XG4gICAgICBsb2dnZXIuaW5mbyhcImNhbm5vdCBsaXN0ZW4gdG8gZXZlbnRzLCBhbHJlYWR5IGRpc3Bvc2VkIVwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBsb2dnZXIuaW5mbygnYWRkaW5nIFwiJXNcIiBldmVudCBsaXN0ZW5lcjonLCBldmVudCwgbGlzdGVuZXIpO1xuICAgIHRoaXMuZW1pdHRlci5vbihldmVudCwgbGlzdGVuZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9uY2UoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgdGhpcy5lbWl0dGVyLm9uY2UoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBvZmYoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgdGhpcy5lbWl0dGVyLm9mZihldmVudCwgbGlzdGVuZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICAgIHRoaXMuZW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBEaXNwb3NlcyBvZiBhbnkgc2lkZS1lZmZlY3RzIHRoaXMgaW50ZXJjZXB0b3IgaGFzIGludHJvZHVjZWQuXG4gICAqL1xuICBkaXNwb3NlKCkge1xuICAgIGNvbnN0IGxvZ2dlciA9IHRoaXMubG9nZ2VyLmV4dGVuZChcImRpc3Bvc2VcIik7XG4gICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gXCJESVNQT1NFRFwiIC8qIERJU1BPU0VEICovKSB7XG4gICAgICBsb2dnZXIuaW5mbyhcImNhbm5vdCBkaXNwb3NlLCBhbHJlYWR5IGRpc3Bvc2VkIVwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbG9nZ2VyLmluZm8oXCJkaXNwb3NpbmcgdGhlIGludGVyY2VwdG9yLi4uXCIpO1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiRElTUE9TSU5HXCIgLyogRElTUE9TSU5HICovO1xuICAgIGlmICghdGhpcy5nZXRJbnN0YW5jZSgpKSB7XG4gICAgICBsb2dnZXIuaW5mbyhcIm5vIGludGVyY2VwdG9ycyBydW5uaW5nLCBza2lwcGluZyBkaXNwb3NlLi4uXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNsZWFySW5zdGFuY2UoKTtcbiAgICBsb2dnZXIuaW5mbyhcImdsb2JhbCBzeW1ib2wgZGVsZXRlZDpcIiwgZ2V0R2xvYmFsU3ltYm9sKHRoaXMuc3ltYm9sKSk7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBsb2dnZXIuaW5mbyhcImRpc3Bvc2luZyBvZiAlZCBzdWJzY3JpcHRpb25zLi4uXCIsIHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGgpO1xuICAgICAgZm9yIChjb25zdCBkaXNwb3NlIG9mIHRoaXMuc3Vic2NyaXB0aW9ucykge1xuICAgICAgICBkaXNwb3NlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgIGxvZ2dlci5pbmZvKFwiZGlzcG9zZWQgb2YgYWxsIHN1YnNjcmlwdGlvbnMhXCIsIHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGgpO1xuICAgIH1cbiAgICB0aGlzLmVtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgbG9nZ2VyLmluZm8oXCJkZXN0cm95ZWQgdGhlIGxpc3RlbmVyIVwiKTtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIkRJU1BPU0VEXCIgLyogRElTUE9TRUQgKi87XG4gIH1cbiAgZ2V0SW5zdGFuY2UoKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0R2xvYmFsU3ltYm9sKHRoaXMuc3ltYm9sKTtcbiAgICB0aGlzLmxvZ2dlci5pbmZvKFwicmV0cmlldmVkIGdsb2JhbCBpbnN0YW5jZTpcIiwgKF9hID0gaW5zdGFuY2UgPT0gbnVsbCA/IHZvaWQgMCA6IGluc3RhbmNlLmNvbnN0cnVjdG9yKSA9PSBudWxsID8gdm9pZCAwIDogX2EubmFtZSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG4gIHNldEluc3RhbmNlKCkge1xuICAgIHNldEdsb2JhbFN5bWJvbCh0aGlzLnN5bWJvbCwgdGhpcyk7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhcInNldCBnbG9iYWwgaW5zdGFuY2UhXCIsIHRoaXMuc3ltYm9sLmRlc2NyaXB0aW9uKTtcbiAgfVxuICBjbGVhckluc3RhbmNlKCkge1xuICAgIGRlbGV0ZUdsb2JhbFN5bWJvbCh0aGlzLnN5bWJvbCk7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhcImNsZWFyZWQgZ2xvYmFsIGluc3RhbmNlIVwiLCB0aGlzLnN5bWJvbC5kZXNjcmlwdGlvbik7XG4gIH1cbn07XG5cbi8vIHNyYy9jcmVhdGVSZXF1ZXN0SWQudHNcbmZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3RJZCgpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMTYpLnNsaWNlKDIpO1xufVxuXG5leHBvcnQge1xuICBJTlRFUk5BTF9SRVFVRVNUX0lEX0hFQURFUl9OQU1FLFxuICBnZXRHbG9iYWxTeW1ib2wsXG4gIGRlbGV0ZUdsb2JhbFN5bWJvbCxcbiAgSW50ZXJjZXB0b3JSZWFkeVN0YXRlLFxuICBJbnRlcmNlcHRvcixcbiAgY3JlYXRlUmVxdWVzdElkXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstUUVEM1E2WjIubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-QED3Q6Z2.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-VUILOQBY.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-VUILOQBY.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XMLHttpRequestInterceptor: () => (/* binding */ XMLHttpRequestInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-6HYIRFX2.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-6HYIRFX2.mjs\");\n/* harmony import */ var _chunk_IBYBTTYK_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-IBYBTTYK.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-IBYBTTYK.mjs\");\n/* harmony import */ var _chunk_HAGW22AN_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-HAGW22AN.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-HAGW22AN.mjs\");\n/* harmony import */ var _chunk_OUWBQF3Z_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-OUWBQF3Z.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-OUWBQF3Z.mjs\");\n/* harmony import */ var _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-QED3Q6Z2.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-QED3Q6Z2.mjs\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var _open_draft_until__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @open-draft/until */ \"(ssr)/./node_modules/@open-draft/until/lib/index.mjs\");\n/* harmony import */ var is_node_process__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! is-node-process */ \"(ssr)/./node_modules/is-node-process/lib/index.mjs\");\n\n\n\n\n\n\n// src/interceptors/XMLHttpRequest/index.ts\n\n\n// src/interceptors/XMLHttpRequest/XMLHttpRequestProxy.ts\n\n\n// src/interceptors/XMLHttpRequest/XMLHttpRequestController.ts\n\n\n\n// src/interceptors/XMLHttpRequest/utils/concatArrayBuffer.ts\nfunction concatArrayBuffer(left, right) {\n  const result = new Uint8Array(left.byteLength + right.byteLength);\n  result.set(left, 0);\n  result.set(right, left.byteLength);\n  return result;\n}\n\n// src/interceptors/XMLHttpRequest/polyfills/EventPolyfill.ts\nvar EventPolyfill = class {\n  constructor(type, options) {\n    this.AT_TARGET = 0;\n    this.BUBBLING_PHASE = 0;\n    this.CAPTURING_PHASE = 0;\n    this.NONE = 0;\n    this.type = \"\";\n    this.srcElement = null;\n    this.currentTarget = null;\n    this.eventPhase = 0;\n    this.isTrusted = true;\n    this.composed = false;\n    this.cancelable = true;\n    this.defaultPrevented = false;\n    this.bubbles = true;\n    this.lengthComputable = true;\n    this.loaded = 0;\n    this.total = 0;\n    this.cancelBubble = false;\n    this.returnValue = true;\n    this.type = type;\n    this.target = (options == null ? void 0 : options.target) || null;\n    this.currentTarget = (options == null ? void 0 : options.currentTarget) || null;\n    this.timeStamp = Date.now();\n  }\n  composedPath() {\n    return [];\n  }\n  initEvent(type, bubbles, cancelable) {\n    this.type = type;\n    this.bubbles = !!bubbles;\n    this.cancelable = !!cancelable;\n  }\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n  stopPropagation() {\n  }\n  stopImmediatePropagation() {\n  }\n};\n\n// src/interceptors/XMLHttpRequest/polyfills/ProgressEventPolyfill.ts\nvar ProgressEventPolyfill = class extends EventPolyfill {\n  constructor(type, init) {\n    super(type);\n    this.lengthComputable = (init == null ? void 0 : init.lengthComputable) || false;\n    this.composed = (init == null ? void 0 : init.composed) || false;\n    this.loaded = (init == null ? void 0 : init.loaded) || 0;\n    this.total = (init == null ? void 0 : init.total) || 0;\n  }\n};\n\n// src/interceptors/XMLHttpRequest/utils/createEvent.ts\nvar SUPPORTS_PROGRESS_EVENT = typeof ProgressEvent !== \"undefined\";\nfunction createEvent(target, type, init) {\n  const progressEvents = [\n    \"error\",\n    \"progress\",\n    \"loadstart\",\n    \"loadend\",\n    \"load\",\n    \"timeout\",\n    \"abort\"\n  ];\n  const ProgressEventClass = SUPPORTS_PROGRESS_EVENT ? ProgressEvent : ProgressEventPolyfill;\n  const event = progressEvents.includes(type) ? new ProgressEventClass(type, {\n    lengthComputable: true,\n    loaded: (init == null ? void 0 : init.loaded) || 0,\n    total: (init == null ? void 0 : init.total) || 0\n  }) : new EventPolyfill(type, {\n    target,\n    currentTarget: target\n  });\n  return event;\n}\n\n// src/utils/findPropertySource.ts\nfunction findPropertySource(target, propertyName) {\n  if (!(propertyName in target)) {\n    return null;\n  }\n  const hasProperty = Object.prototype.hasOwnProperty.call(target, propertyName);\n  if (hasProperty) {\n    return target;\n  }\n  const prototype = Reflect.getPrototypeOf(target);\n  return prototype ? findPropertySource(prototype, propertyName) : null;\n}\n\n// src/utils/createProxy.ts\nfunction createProxy(target, options) {\n  const proxy = new Proxy(target, optionsToProxyHandler(options));\n  return proxy;\n}\nfunction optionsToProxyHandler(options) {\n  const { constructorCall, methodCall, getProperty, setProperty } = options;\n  const handler = {};\n  if (typeof constructorCall !== \"undefined\") {\n    handler.construct = function(target, args, newTarget) {\n      const next = Reflect.construct.bind(null, target, args, newTarget);\n      return constructorCall.call(newTarget, args, next);\n    };\n  }\n  handler.set = function(target, propertyName, nextValue) {\n    const next = () => {\n      const propertySource = findPropertySource(target, propertyName) || target;\n      const ownDescriptors = Reflect.getOwnPropertyDescriptor(\n        propertySource,\n        propertyName\n      );\n      if (typeof (ownDescriptors == null ? void 0 : ownDescriptors.set) !== \"undefined\") {\n        ownDescriptors.set.apply(target, [nextValue]);\n        return true;\n      }\n      return Reflect.defineProperty(propertySource, propertyName, {\n        writable: true,\n        enumerable: true,\n        configurable: true,\n        value: nextValue\n      });\n    };\n    if (typeof setProperty !== \"undefined\") {\n      return setProperty.call(target, [propertyName, nextValue], next);\n    }\n    return next();\n  };\n  handler.get = function(target, propertyName, receiver) {\n    const next = () => target[propertyName];\n    const value = typeof getProperty !== \"undefined\" ? getProperty.call(target, [propertyName, receiver], next) : next();\n    if (typeof value === \"function\") {\n      return (...args) => {\n        const next2 = value.bind(target, ...args);\n        if (typeof methodCall !== \"undefined\") {\n          return methodCall.call(target, [propertyName, args], next2);\n        }\n        return next2();\n      };\n    }\n    return value;\n  };\n  return handler;\n}\n\n// src/interceptors/XMLHttpRequest/utils/isDomParserSupportedType.ts\nfunction isDomParserSupportedType(type) {\n  const supportedTypes = [\n    \"application/xhtml+xml\",\n    \"application/xml\",\n    \"image/svg+xml\",\n    \"text/html\",\n    \"text/xml\"\n  ];\n  return supportedTypes.some((supportedType) => {\n    return type.startsWith(supportedType);\n  });\n}\n\n// src/utils/parseJson.ts\nfunction parseJson(data) {\n  try {\n    const json = JSON.parse(data);\n    return json;\n  } catch (_) {\n    return null;\n  }\n}\n\n// src/interceptors/XMLHttpRequest/utils/createResponse.ts\nfunction createResponse(request, body) {\n  const responseBodyOrNull = (0,_chunk_IBYBTTYK_mjs__WEBPACK_IMPORTED_MODULE_1__.isResponseWithoutBody)(request.status) ? null : body;\n  return new Response(responseBodyOrNull, {\n    status: request.status,\n    statusText: request.statusText,\n    headers: createHeadersFromXMLHttpReqestHeaders(\n      request.getAllResponseHeaders()\n    )\n  });\n}\nfunction createHeadersFromXMLHttpReqestHeaders(headersString) {\n  const headers = new Headers();\n  const lines = headersString.split(/[\\r\\n]+/);\n  for (const line of lines) {\n    if (line.trim() === \"\") {\n      continue;\n    }\n    const [name, ...parts] = line.split(\": \");\n    const value = parts.join(\": \");\n    headers.append(name, value);\n  }\n  return headers;\n}\n\n// src/interceptors/XMLHttpRequest/XMLHttpRequestController.ts\nvar IS_MOCKED_RESPONSE = Symbol(\"isMockedResponse\");\nvar IS_NODE = (0,is_node_process__WEBPACK_IMPORTED_MODULE_7__.isNodeProcess)();\nvar XMLHttpRequestController = class {\n  constructor(initialRequest, logger) {\n    this.initialRequest = initialRequest;\n    this.logger = logger;\n    this.method = \"GET\";\n    this.url = null;\n    this.events = /* @__PURE__ */ new Map();\n    this.requestId = (0,_chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_4__.createRequestId)();\n    this.requestHeaders = new Headers();\n    this.responseBuffer = new Uint8Array();\n    this.request = createProxy(initialRequest, {\n      setProperty: ([propertyName, nextValue], invoke) => {\n        switch (propertyName) {\n          case \"ontimeout\": {\n            const eventName = propertyName.slice(\n              2\n            );\n            this.request.addEventListener(eventName, nextValue);\n            return invoke();\n          }\n          default: {\n            return invoke();\n          }\n        }\n      },\n      methodCall: ([methodName, args], invoke) => {\n        var _a;\n        switch (methodName) {\n          case \"open\": {\n            const [method, url] = args;\n            if (typeof url === \"undefined\") {\n              this.method = \"GET\";\n              this.url = toAbsoluteUrl(method);\n            } else {\n              this.method = method;\n              this.url = toAbsoluteUrl(url);\n            }\n            this.logger = this.logger.extend(`${this.method} ${this.url.href}`);\n            this.logger.info(\"open\", this.method, this.url.href);\n            return invoke();\n          }\n          case \"addEventListener\": {\n            const [eventName, listener] = args;\n            this.registerEvent(eventName, listener);\n            this.logger.info(\"addEventListener\", eventName, listener);\n            return invoke();\n          }\n          case \"setRequestHeader\": {\n            const [name, value] = args;\n            this.requestHeaders.set(name, value);\n            this.logger.info(\"setRequestHeader\", name, value);\n            return invoke();\n          }\n          case \"send\": {\n            const [body] = args;\n            if (body != null) {\n              this.requestBody = typeof body === \"string\" ? (0,_chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_0__.encodeBuffer)(body) : body;\n            }\n            this.request.addEventListener(\"load\", () => {\n              if (typeof this.onResponse !== \"undefined\") {\n                const fetchResponse = createResponse(\n                  this.request,\n                  /**\n                   * The `response` property is the right way to read\n                   * the ambiguous response body, as the request's \"responseType\" may differ.\n                   * @see https://xhr.spec.whatwg.org/#the-response-attribute\n                   */\n                  this.request.response\n                );\n                this.onResponse.call(this, {\n                  response: fetchResponse,\n                  isMockedResponse: IS_MOCKED_RESPONSE in this.request,\n                  request: fetchRequest,\n                  requestId: this.requestId\n                });\n              }\n            });\n            const fetchRequest = this.toFetchApiRequest();\n            const onceRequestSettled = ((_a = this.onRequest) == null ? void 0 : _a.call(this, {\n              request: fetchRequest,\n              requestId: this.requestId\n            })) || Promise.resolve();\n            onceRequestSettled.finally(() => {\n              if (this.request.readyState < this.request.LOADING) {\n                this.logger.info(\n                  \"request callback settled but request has not been handled (readystate %d), performing as-is...\",\n                  this.request.readyState\n                );\n                if (IS_NODE) {\n                  this.request.setRequestHeader(\n                    _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_4__.INTERNAL_REQUEST_ID_HEADER_NAME,\n                    this.requestId\n                  );\n                }\n                return invoke();\n              }\n            });\n            break;\n          }\n          default: {\n            return invoke();\n          }\n        }\n      }\n    });\n  }\n  registerEvent(eventName, listener) {\n    const prevEvents = this.events.get(eventName) || [];\n    const nextEvents = prevEvents.concat(listener);\n    this.events.set(eventName, nextEvents);\n    this.logger.info('registered event \"%s\"', eventName, listener);\n  }\n  /**\n   * Responds to the current request with the given\n   * Fetch API `Response` instance.\n   */\n  respondWith(response) {\n    this.logger.info(\n      \"responding with a mocked response: %d %s\",\n      response.status,\n      response.statusText\n    );\n    define(this.request, IS_MOCKED_RESPONSE, true);\n    define(this.request, \"status\", response.status);\n    define(this.request, \"statusText\", response.statusText);\n    define(this.request, \"responseURL\", this.url.href);\n    this.request.getResponseHeader = new Proxy(this.request.getResponseHeader, {\n      apply: (_, __, args) => {\n        this.logger.info(\"getResponseHeader\", args[0]);\n        if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n          this.logger.info(\"headers not received yet, returning null\");\n          return null;\n        }\n        const headerValue = response.headers.get(args[0]);\n        this.logger.info(\n          'resolved response header \"%s\" to',\n          args[0],\n          headerValue\n        );\n        return headerValue;\n      }\n    });\n    this.request.getAllResponseHeaders = new Proxy(\n      this.request.getAllResponseHeaders,\n      {\n        apply: () => {\n          this.logger.info(\"getAllResponseHeaders\");\n          if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n            this.logger.info(\"headers not received yet, returning empty string\");\n            return \"\";\n          }\n          const headersList = Array.from(response.headers.entries());\n          const allHeaders = headersList.map(([headerName, headerValue]) => {\n            return `${headerName}: ${headerValue}`;\n          }).join(\"\\r\\n\");\n          this.logger.info(\"resolved all response headers to\", allHeaders);\n          return allHeaders;\n        }\n      }\n    );\n    Object.defineProperties(this.request, {\n      response: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.response\n      },\n      responseText: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.responseText\n      },\n      responseXML: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.responseXML\n      }\n    });\n    const totalResponseBodyLength = response.headers.has(\"Content-Length\") ? Number(response.headers.get(\"Content-Length\")) : (\n      /**\n       * @todo Infer the response body length from the response body.\n       */\n      void 0\n    );\n    this.logger.info(\"calculated response body length\", totalResponseBodyLength);\n    this.trigger(\"loadstart\", {\n      loaded: 0,\n      total: totalResponseBodyLength\n    });\n    this.setReadyState(this.request.HEADERS_RECEIVED);\n    this.setReadyState(this.request.LOADING);\n    const finalizeResponse = () => {\n      this.logger.info(\"finalizing the mocked response...\");\n      this.setReadyState(this.request.DONE);\n      this.trigger(\"load\", {\n        loaded: this.responseBuffer.byteLength,\n        total: totalResponseBodyLength\n      });\n      this.trigger(\"loadend\", {\n        loaded: this.responseBuffer.byteLength,\n        total: totalResponseBodyLength\n      });\n    };\n    if (response.body) {\n      this.logger.info(\"mocked response has body, streaming...\");\n      const reader = response.body.getReader();\n      const readNextResponseBodyChunk = async () => {\n        const { value, done } = await reader.read();\n        if (done) {\n          this.logger.info(\"response body stream done!\");\n          finalizeResponse();\n          return;\n        }\n        if (value) {\n          this.logger.info(\"read response body chunk:\", value);\n          this.responseBuffer = concatArrayBuffer(this.responseBuffer, value);\n          this.trigger(\"progress\", {\n            loaded: this.responseBuffer.byteLength,\n            total: totalResponseBodyLength\n          });\n        }\n        readNextResponseBodyChunk();\n      };\n      readNextResponseBodyChunk();\n    } else {\n      finalizeResponse();\n    }\n  }\n  responseBufferToText() {\n    return (0,_chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_0__.decodeBuffer)(this.responseBuffer);\n  }\n  get response() {\n    this.logger.info(\n      \"getResponse (responseType: %s)\",\n      this.request.responseType\n    );\n    if (this.request.readyState !== this.request.DONE) {\n      return null;\n    }\n    switch (this.request.responseType) {\n      case \"json\": {\n        const responseJson = parseJson(this.responseBufferToText());\n        this.logger.info(\"resolved response JSON\", responseJson);\n        return responseJson;\n      }\n      case \"arraybuffer\": {\n        const arrayBuffer = (0,_chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_0__.toArrayBuffer)(this.responseBuffer);\n        this.logger.info(\"resolved response ArrayBuffer\", arrayBuffer);\n        return arrayBuffer;\n      }\n      case \"blob\": {\n        const mimeType = this.request.getResponseHeader(\"Content-Type\") || \"text/plain\";\n        const responseBlob = new Blob([this.responseBufferToText()], {\n          type: mimeType\n        });\n        this.logger.info(\n          \"resolved response Blob (mime type: %s)\",\n          responseBlob,\n          mimeType\n        );\n        return responseBlob;\n      }\n      default: {\n        const responseText = this.responseBufferToText();\n        this.logger.info(\n          'resolving \"%s\" response type as text',\n          this.request.responseType,\n          responseText\n        );\n        return responseText;\n      }\n    }\n  }\n  get responseText() {\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_5__.invariant)(\n      this.request.responseType === \"\" || this.request.responseType === \"text\",\n      \"InvalidStateError: The object is in invalid state.\"\n    );\n    if (this.request.readyState !== this.request.LOADING && this.request.readyState !== this.request.DONE) {\n      return \"\";\n    }\n    const responseText = this.responseBufferToText();\n    this.logger.info('getResponseText: \"%s\"', responseText);\n    return responseText;\n  }\n  get responseXML() {\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_5__.invariant)(\n      this.request.responseType === \"\" || this.request.responseType === \"document\",\n      \"InvalidStateError: The object is in invalid state.\"\n    );\n    if (this.request.readyState !== this.request.DONE) {\n      return null;\n    }\n    const contentType = this.request.getResponseHeader(\"Content-Type\") || \"\";\n    if (typeof DOMParser === \"undefined\") {\n      console.warn(\n        \"Cannot retrieve XMLHttpRequest response body as XML: DOMParser is not defined. You are likely using an environment that is not browser or does not polyfill browser globals correctly.\"\n      );\n      return null;\n    }\n    if (isDomParserSupportedType(contentType)) {\n      return new DOMParser().parseFromString(\n        this.responseBufferToText(),\n        contentType\n      );\n    }\n    return null;\n  }\n  errorWith(error) {\n    this.logger.info(\"responding with an error\");\n    this.setReadyState(this.request.DONE);\n    this.trigger(\"error\");\n    this.trigger(\"loadend\");\n  }\n  /**\n   * Transitions this request's `readyState` to the given one.\n   */\n  setReadyState(nextReadyState) {\n    this.logger.info(\n      \"setReadyState: %d -> %d\",\n      this.request.readyState,\n      nextReadyState\n    );\n    if (this.request.readyState === nextReadyState) {\n      this.logger.info(\"ready state identical, skipping transition...\");\n      return;\n    }\n    define(this.request, \"readyState\", nextReadyState);\n    this.logger.info(\"set readyState to: %d\", nextReadyState);\n    if (nextReadyState !== this.request.UNSENT) {\n      this.logger.info('triggerring \"readystatechange\" event...');\n      this.trigger(\"readystatechange\");\n    }\n  }\n  /**\n   * Triggers given event on the `XMLHttpRequest` instance.\n   */\n  trigger(eventName, options) {\n    const callback = this.request[`on${eventName}`];\n    const event = createEvent(this.request, eventName, options);\n    this.logger.info('trigger \"%s\"', eventName, options || \"\");\n    if (typeof callback === \"function\") {\n      this.logger.info('found a direct \"%s\" callback, calling...', eventName);\n      callback.call(this.request, event);\n    }\n    for (const [registeredEventName, listeners] of this.events) {\n      if (registeredEventName === eventName) {\n        this.logger.info(\n          'found %d listener(s) for \"%s\" event, calling...',\n          listeners.length,\n          eventName\n        );\n        listeners.forEach((listener) => listener.call(this.request, event));\n      }\n    }\n  }\n  /**\n   * Converts this `XMLHttpRequest` instance into a Fetch API `Request` instance.\n   */\n  toFetchApiRequest() {\n    this.logger.info(\"converting request to a Fetch API Request...\");\n    const fetchRequest = new Request(this.url.href, {\n      method: this.method,\n      headers: this.requestHeaders,\n      /**\n       * @see https://xhr.spec.whatwg.org/#cross-origin-credentials\n       */\n      credentials: this.request.withCredentials ? \"include\" : \"same-origin\",\n      body: [\"GET\", \"HEAD\"].includes(this.method) ? null : this.requestBody\n    });\n    const proxyHeaders = createProxy(fetchRequest.headers, {\n      methodCall: ([methodName, args], invoke) => {\n        switch (methodName) {\n          case \"append\":\n          case \"set\": {\n            const [headerName, headerValue] = args;\n            this.request.setRequestHeader(headerName, headerValue);\n            break;\n          }\n          case \"delete\": {\n            const [headerName] = args;\n            console.warn(\n              `XMLHttpRequest: Cannot remove a \"${headerName}\" header from the Fetch API representation of the \"${fetchRequest.method} ${fetchRequest.url}\" request. XMLHttpRequest headers cannot be removed.`\n            );\n            break;\n          }\n        }\n        return invoke();\n      }\n    });\n    define(fetchRequest, \"headers\", proxyHeaders);\n    this.logger.info(\"converted request to a Fetch API Request!\", fetchRequest);\n    return fetchRequest;\n  }\n};\nfunction toAbsoluteUrl(url) {\n  if (typeof location === \"undefined\") {\n    return new URL(url);\n  }\n  return new URL(url.toString(), location.href);\n}\nfunction define(target, property, value) {\n  Reflect.defineProperty(target, property, {\n    // Ensure writable properties to allow redefining readonly properties.\n    writable: true,\n    enumerable: true,\n    value\n  });\n}\n\n// src/interceptors/XMLHttpRequest/XMLHttpRequestProxy.ts\nfunction createXMLHttpRequestProxy({\n  emitter,\n  logger\n}) {\n  const XMLHttpRequestProxy = new Proxy(globalThis.XMLHttpRequest, {\n    construct(target, args, newTarget) {\n      logger.info(\"constructed new XMLHttpRequest\");\n      const originalRequest = Reflect.construct(\n        target,\n        args,\n        newTarget\n      );\n      const prototypeDescriptors = Object.getOwnPropertyDescriptors(\n        target.prototype\n      );\n      for (const propertyName in prototypeDescriptors) {\n        Reflect.defineProperty(\n          originalRequest,\n          propertyName,\n          prototypeDescriptors[propertyName]\n        );\n      }\n      const xhrRequestController = new XMLHttpRequestController(\n        originalRequest,\n        logger\n      );\n      xhrRequestController.onRequest = async function({ request, requestId }) {\n        const { interactiveRequest, requestController } = (0,_chunk_OUWBQF3Z_mjs__WEBPACK_IMPORTED_MODULE_3__.toInteractiveRequest)(request);\n        this.logger.info(\"awaiting mocked response...\");\n        emitter.once(\"request\", ({ requestId: pendingRequestId }) => {\n          if (pendingRequestId !== requestId) {\n            return;\n          }\n          if (requestController.responsePromise.state === \"pending\") {\n            requestController.respondWith(void 0);\n          }\n        });\n        const resolverResult = await (0,_open_draft_until__WEBPACK_IMPORTED_MODULE_6__.until)(async () => {\n          this.logger.info(\n            'emitting the \"request\" event for %s listener(s)...',\n            emitter.listenerCount(\"request\")\n          );\n          await (0,_chunk_OUWBQF3Z_mjs__WEBPACK_IMPORTED_MODULE_3__.emitAsync)(emitter, \"request\", {\n            request: interactiveRequest,\n            requestId\n          });\n          this.logger.info('all \"request\" listeners settled!');\n          const mockedResponse2 = await requestController.responsePromise;\n          this.logger.info(\"event.respondWith called with:\", mockedResponse2);\n          return mockedResponse2;\n        });\n        if (resolverResult.error) {\n          this.logger.info(\n            \"request listener threw an exception, aborting request...\",\n            resolverResult.error\n          );\n          xhrRequestController.errorWith(resolverResult.error);\n          return;\n        }\n        const mockedResponse = resolverResult.data;\n        if (typeof mockedResponse !== \"undefined\") {\n          this.logger.info(\n            \"received mocked response: %d %s\",\n            mockedResponse.status,\n            mockedResponse.statusText\n          );\n          if (mockedResponse.type === \"error\") {\n            this.logger.info(\n              \"received a network error response, rejecting the request promise...\"\n            );\n            xhrRequestController.errorWith(new TypeError(\"Network error\"));\n            return;\n          }\n          return xhrRequestController.respondWith(mockedResponse);\n        }\n        this.logger.info(\n          \"no mocked response received, performing request as-is...\"\n        );\n      };\n      xhrRequestController.onResponse = async function({\n        response,\n        isMockedResponse,\n        request,\n        requestId\n      }) {\n        this.logger.info(\n          'emitting the \"response\" event for %s listener(s)...',\n          emitter.listenerCount(\"response\")\n        );\n        emitter.emit(\"response\", {\n          response,\n          isMockedResponse,\n          request,\n          requestId\n        });\n      };\n      return xhrRequestController.request;\n    }\n  });\n  return XMLHttpRequestProxy;\n}\n\n// src/interceptors/XMLHttpRequest/index.ts\nvar _XMLHttpRequestInterceptor = class extends _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_4__.Interceptor {\n  constructor() {\n    super(_XMLHttpRequestInterceptor.interceptorSymbol);\n  }\n  checkEnvironment() {\n    return typeof globalThis.XMLHttpRequest !== \"undefined\";\n  }\n  setup() {\n    const logger = this.logger.extend(\"setup\");\n    logger.info('patching \"XMLHttpRequest\" module...');\n    const PureXMLHttpRequest = globalThis.XMLHttpRequest;\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_5__.invariant)(\n      !PureXMLHttpRequest[_chunk_HAGW22AN_mjs__WEBPACK_IMPORTED_MODULE_2__.IS_PATCHED_MODULE],\n      'Failed to patch the \"XMLHttpRequest\" module: already patched.'\n    );\n    globalThis.XMLHttpRequest = createXMLHttpRequestProxy({\n      emitter: this.emitter,\n      logger: this.logger\n    });\n    logger.info(\n      'native \"XMLHttpRequest\" module patched!',\n      globalThis.XMLHttpRequest.name\n    );\n    Object.defineProperty(globalThis.XMLHttpRequest, _chunk_HAGW22AN_mjs__WEBPACK_IMPORTED_MODULE_2__.IS_PATCHED_MODULE, {\n      enumerable: true,\n      configurable: true,\n      value: true\n    });\n    this.subscriptions.push(() => {\n      Object.defineProperty(globalThis.XMLHttpRequest, _chunk_HAGW22AN_mjs__WEBPACK_IMPORTED_MODULE_2__.IS_PATCHED_MODULE, {\n        value: void 0\n      });\n      globalThis.XMLHttpRequest = PureXMLHttpRequest;\n      logger.info(\n        'native \"XMLHttpRequest\" module restored!',\n        globalThis.XMLHttpRequest.name\n      );\n    });\n  }\n};\nvar XMLHttpRequestInterceptor = _XMLHttpRequestInterceptor;\nXMLHttpRequestInterceptor.interceptorSymbol = Symbol(\"xhr\");\n\n\n//# sourceMappingURL=chunk-VUILOQBY.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-VUILOQBY.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mswjs/interceptors/lib/node/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchInterceptor: () => (/* reexport safe */ _chunk_GUY7XK43_mjs__WEBPACK_IMPORTED_MODULE_0__.BatchInterceptor),\n/* harmony export */   INTERNAL_REQUEST_ID_HEADER_NAME: () => (/* reexport safe */ _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_4__.INTERNAL_REQUEST_ID_HEADER_NAME),\n/* harmony export */   IS_PATCHED_MODULE: () => (/* reexport safe */ _chunk_HAGW22AN_mjs__WEBPACK_IMPORTED_MODULE_3__.IS_PATCHED_MODULE),\n/* harmony export */   Interceptor: () => (/* reexport safe */ _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_4__.Interceptor),\n/* harmony export */   InterceptorReadyState: () => (/* reexport safe */ _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_4__.InterceptorReadyState),\n/* harmony export */   createRequestId: () => (/* reexport safe */ _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_4__.createRequestId),\n/* harmony export */   decodeBuffer: () => (/* reexport safe */ _chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_1__.decodeBuffer),\n/* harmony export */   deleteGlobalSymbol: () => (/* reexport safe */ _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_4__.deleteGlobalSymbol),\n/* harmony export */   encodeBuffer: () => (/* reexport safe */ _chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_1__.encodeBuffer),\n/* harmony export */   getCleanUrl: () => (/* binding */ getCleanUrl),\n/* harmony export */   getGlobalSymbol: () => (/* reexport safe */ _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_4__.getGlobalSymbol),\n/* harmony export */   isResponseWithoutBody: () => (/* reexport safe */ _chunk_IBYBTTYK_mjs__WEBPACK_IMPORTED_MODULE_2__.isResponseWithoutBody)\n/* harmony export */ });\n/* harmony import */ var _chunk_GUY7XK43_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-GUY7XK43.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-GUY7XK43.mjs\");\n/* harmony import */ var _chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-6HYIRFX2.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-6HYIRFX2.mjs\");\n/* harmony import */ var _chunk_IBYBTTYK_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-IBYBTTYK.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-IBYBTTYK.mjs\");\n/* harmony import */ var _chunk_HAGW22AN_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-HAGW22AN.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-HAGW22AN.mjs\");\n/* harmony import */ var _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-QED3Q6Z2.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-QED3Q6Z2.mjs\");\n\n\n\n\n\n\n// src/utils/getCleanUrl.ts\nfunction getCleanUrl(url, isAbsolute = true) {\n  return [isAbsolute && url.origin, url.pathname].filter(Boolean).join(\"\");\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFOEI7QUFJQTtBQUdBO0FBR0E7QUFRQTs7QUFFOUI7QUFDQTtBQUNBO0FBQ0E7QUFjRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVtby1sb2dpbi8uL25vZGVfbW9kdWxlcy9AbXN3anMvaW50ZXJjZXB0b3JzL2xpYi9ub2RlL2luZGV4Lm1qcz9hOWI3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJhdGNoSW50ZXJjZXB0b3Jcbn0gZnJvbSBcIi4vY2h1bmstR1VZN1hLNDMubWpzXCI7XG5pbXBvcnQge1xuICBkZWNvZGVCdWZmZXIsXG4gIGVuY29kZUJ1ZmZlclxufSBmcm9tIFwiLi9jaHVuay02SFlJUkZYMi5tanNcIjtcbmltcG9ydCB7XG4gIGlzUmVzcG9uc2VXaXRob3V0Qm9keVxufSBmcm9tIFwiLi9jaHVuay1JQllCVFRZSy5tanNcIjtcbmltcG9ydCB7XG4gIElTX1BBVENIRURfTU9EVUxFXG59IGZyb20gXCIuL2NodW5rLUhBR1cyMkFOLm1qc1wiO1xuaW1wb3J0IHtcbiAgSU5URVJOQUxfUkVRVUVTVF9JRF9IRUFERVJfTkFNRSxcbiAgSW50ZXJjZXB0b3IsXG4gIEludGVyY2VwdG9yUmVhZHlTdGF0ZSxcbiAgY3JlYXRlUmVxdWVzdElkLFxuICBkZWxldGVHbG9iYWxTeW1ib2wsXG4gIGdldEdsb2JhbFN5bWJvbFxufSBmcm9tIFwiLi9jaHVuay1RRUQzUTZaMi5tanNcIjtcblxuLy8gc3JjL3V0aWxzL2dldENsZWFuVXJsLnRzXG5mdW5jdGlvbiBnZXRDbGVhblVybCh1cmwsIGlzQWJzb2x1dGUgPSB0cnVlKSB7XG4gIHJldHVybiBbaXNBYnNvbHV0ZSAmJiB1cmwub3JpZ2luLCB1cmwucGF0aG5hbWVdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiXCIpO1xufVxuZXhwb3J0IHtcbiAgQmF0Y2hJbnRlcmNlcHRvcixcbiAgSU5URVJOQUxfUkVRVUVTVF9JRF9IRUFERVJfTkFNRSxcbiAgSVNfUEFUQ0hFRF9NT0RVTEUsXG4gIEludGVyY2VwdG9yLFxuICBJbnRlcmNlcHRvclJlYWR5U3RhdGUsXG4gIGNyZWF0ZVJlcXVlc3RJZCxcbiAgZGVjb2RlQnVmZmVyLFxuICBkZWxldGVHbG9iYWxTeW1ib2wsXG4gIGVuY29kZUJ1ZmZlcixcbiAgZ2V0Q2xlYW5VcmwsXG4gIGdldEdsb2JhbFN5bWJvbCxcbiAgaXNSZXNwb25zZVdpdGhvdXRCb2R5XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mswjs/interceptors/lib/node/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mswjs/interceptors/lib/node/interceptors/ClientRequest/index.mjs":
/*!****************************************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/interceptors/ClientRequest/index.mjs ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientRequestInterceptor: () => (/* reexport safe */ _chunk_CCASONWB_mjs__WEBPACK_IMPORTED_MODULE_0__.ClientRequestInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_CCASONWB_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chunk-CCASONWB.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-CCASONWB.mjs\");\n/* harmony import */ var _chunk_IBYBTTYK_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../chunk-IBYBTTYK.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-IBYBTTYK.mjs\");\n/* harmony import */ var _chunk_DERTLGL3_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../chunk-DERTLGL3.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-DERTLGL3.mjs\");\n/* harmony import */ var _chunk_OUWBQF3Z_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../chunk-OUWBQF3Z.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-OUWBQF3Z.mjs\");\n/* harmony import */ var _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../chunk-QED3Q6Z2.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-QED3Q6Z2.mjs\");\n\n\n\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9pbnRlcmNlcHRvcnMvQ2xpZW50UmVxdWVzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRWtDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHaEM7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2RlbW8tbG9naW4vLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9pbnRlcmNlcHRvcnMvQ2xpZW50UmVxdWVzdC9pbmRleC5tanM/ODMyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDbGllbnRSZXF1ZXN0SW50ZXJjZXB0b3Jcbn0gZnJvbSBcIi4uLy4uL2NodW5rLUNDQVNPTldCLm1qc1wiO1xuaW1wb3J0IFwiLi4vLi4vY2h1bmstSUJZQlRUWUsubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi9jaHVuay1ERVJUTEdMMy5tanNcIjtcbmltcG9ydCBcIi4uLy4uL2NodW5rLU9VV0JRRjNaLm1qc1wiO1xuaW1wb3J0IFwiLi4vLi4vY2h1bmstUUVEM1E2WjIubWpzXCI7XG5leHBvcnQge1xuICBDbGllbnRSZXF1ZXN0SW50ZXJjZXB0b3Jcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mswjs/interceptors/lib/node/interceptors/ClientRequest/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mswjs/interceptors/lib/node/interceptors/XMLHttpRequest/index.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/interceptors/XMLHttpRequest/index.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XMLHttpRequestInterceptor: () => (/* reexport safe */ _chunk_VUILOQBY_mjs__WEBPACK_IMPORTED_MODULE_0__.XMLHttpRequestInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_VUILOQBY_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chunk-VUILOQBY.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-VUILOQBY.mjs\");\n/* harmony import */ var _chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../chunk-6HYIRFX2.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-6HYIRFX2.mjs\");\n/* harmony import */ var _chunk_IBYBTTYK_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../chunk-IBYBTTYK.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-IBYBTTYK.mjs\");\n/* harmony import */ var _chunk_HAGW22AN_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../chunk-HAGW22AN.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-HAGW22AN.mjs\");\n/* harmony import */ var _chunk_OUWBQF3Z_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../chunk-OUWBQF3Z.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-OUWBQF3Z.mjs\");\n/* harmony import */ var _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../chunk-QED3Q6Z2.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-QED3Q6Z2.mjs\");\n\n\n\n\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9pbnRlcmNlcHRvcnMvWE1MSHR0cFJlcXVlc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFFa0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR2hDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZW1vLWxvZ2luLy4vbm9kZV9tb2R1bGVzL0Btc3dqcy9pbnRlcmNlcHRvcnMvbGliL25vZGUvaW50ZXJjZXB0b3JzL1hNTEh0dHBSZXF1ZXN0L2luZGV4Lm1qcz83ZTNjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFhNTEh0dHBSZXF1ZXN0SW50ZXJjZXB0b3Jcbn0gZnJvbSBcIi4uLy4uL2NodW5rLVZVSUxPUUJZLm1qc1wiO1xuaW1wb3J0IFwiLi4vLi4vY2h1bmstNkhZSVJGWDIubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi9jaHVuay1JQllCVFRZSy5tanNcIjtcbmltcG9ydCBcIi4uLy4uL2NodW5rLUhBR1cyMkFOLm1qc1wiO1xuaW1wb3J0IFwiLi4vLi4vY2h1bmstT1VXQlFGM1oubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi9jaHVuay1RRUQzUTZaMi5tanNcIjtcbmV4cG9ydCB7XG4gIFhNTEh0dHBSZXF1ZXN0SW50ZXJjZXB0b3Jcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mswjs/interceptors/lib/node/interceptors/XMLHttpRequest/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mswjs/interceptors/lib/node/interceptors/fetch/index.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/interceptors/fetch/index.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchInterceptor: () => (/* binding */ FetchInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_DERTLGL3_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chunk-DERTLGL3.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-DERTLGL3.mjs\");\n/* harmony import */ var _chunk_HAGW22AN_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../chunk-HAGW22AN.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-HAGW22AN.mjs\");\n/* harmony import */ var _chunk_OUWBQF3Z_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../chunk-OUWBQF3Z.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-OUWBQF3Z.mjs\");\n/* harmony import */ var _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../chunk-QED3Q6Z2.mjs */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/chunk-QED3Q6Z2.mjs\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @open-draft/deferred-promise */ \"(ssr)/./node_modules/@open-draft/deferred-promise/build/index.mjs\");\n/* harmony import */ var _open_draft_until__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @open-draft/until */ \"(ssr)/./node_modules/@open-draft/until/lib/index.mjs\");\n\n\n\n\n\n// src/interceptors/fetch/index.ts\n\n\n\n\n// src/utils/canParseUrl.ts\nfunction canParseUrl(url) {\n  try {\n    new URL(url);\n    return true;\n  } catch (_error) {\n    return false;\n  }\n}\n\n// src/interceptors/fetch/index.ts\nvar _FetchInterceptor = class extends _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_3__.Interceptor {\n  constructor() {\n    super(_FetchInterceptor.symbol);\n  }\n  checkEnvironment() {\n    return typeof globalThis !== \"undefined\" && typeof globalThis.fetch !== \"undefined\";\n  }\n  async setup() {\n    const pureFetch = globalThis.fetch;\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_4__.invariant)(\n      !pureFetch[_chunk_HAGW22AN_mjs__WEBPACK_IMPORTED_MODULE_1__.IS_PATCHED_MODULE],\n      'Failed to patch the \"fetch\" module: already patched.'\n    );\n    globalThis.fetch = async (input, init) => {\n      var _a;\n      const requestId = (0,_chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_3__.createRequestId)();\n      const resolvedInput = typeof input === \"string\" && typeof location !== \"undefined\" && !canParseUrl(input) ? new URL(input, location.origin) : input;\n      const request = new Request(resolvedInput, init);\n      this.logger.info(\"[%s] %s\", request.method, request.url);\n      const { interactiveRequest, requestController } = (0,_chunk_OUWBQF3Z_mjs__WEBPACK_IMPORTED_MODULE_2__.toInteractiveRequest)(request);\n      this.logger.info(\n        'emitting the \"request\" event for %d listener(s)...',\n        this.emitter.listenerCount(\"request\")\n      );\n      this.emitter.once(\"request\", ({ requestId: pendingRequestId }) => {\n        if (pendingRequestId !== requestId) {\n          return;\n        }\n        if (requestController.responsePromise.state === \"pending\") {\n          requestController.responsePromise.resolve(void 0);\n        }\n      });\n      this.logger.info(\"awaiting for the mocked response...\");\n      const signal = interactiveRequest.signal;\n      const requestAborted = new _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_5__.DeferredPromise();\n      if (signal) {\n        signal.addEventListener(\n          \"abort\",\n          () => {\n            requestAborted.reject(signal.reason);\n          },\n          { once: true }\n        );\n      }\n      const resolverResult = await (0,_open_draft_until__WEBPACK_IMPORTED_MODULE_6__.until)(async () => {\n        const listenersFinished = (0,_chunk_OUWBQF3Z_mjs__WEBPACK_IMPORTED_MODULE_2__.emitAsync)(this.emitter, \"request\", {\n          request: interactiveRequest,\n          requestId\n        });\n        await Promise.race([\n          requestAborted,\n          // Put the listeners invocation Promise in the same race condition\n          // with the request abort Promise because otherwise awaiting the listeners\n          // would always yield some response (or undefined).\n          listenersFinished,\n          requestController.responsePromise\n        ]);\n        this.logger.info(\"all request listeners have been resolved!\");\n        const mockedResponse2 = await requestController.responsePromise;\n        this.logger.info(\"event.respondWith called with:\", mockedResponse2);\n        return mockedResponse2;\n      });\n      if (requestAborted.state === \"rejected\") {\n        return Promise.reject(requestAborted.rejectionReason);\n      }\n      if (resolverResult.error) {\n        return Promise.reject(createNetworkError(resolverResult.error));\n      }\n      const mockedResponse = resolverResult.data;\n      if (mockedResponse && !((_a = request.signal) == null ? void 0 : _a.aborted)) {\n        this.logger.info(\"received mocked response:\", mockedResponse);\n        if ((0,_chunk_DERTLGL3_mjs__WEBPACK_IMPORTED_MODULE_0__.isPropertyAccessible)(mockedResponse, \"type\") && mockedResponse.type === \"error\") {\n          this.logger.info(\n            \"received a network error response, rejecting the request promise...\"\n          );\n          return Promise.reject(createNetworkError(mockedResponse));\n        }\n        const responseClone = mockedResponse.clone();\n        this.emitter.emit(\"response\", {\n          response: responseClone,\n          isMockedResponse: true,\n          request: interactiveRequest,\n          requestId\n        });\n        Object.defineProperty(mockedResponse, \"url\", {\n          writable: false,\n          enumerable: true,\n          configurable: false,\n          value: request.url\n        });\n        return mockedResponse;\n      }\n      this.logger.info(\"no mocked response received!\");\n      return pureFetch(request).then((response) => {\n        const responseClone = response.clone();\n        this.logger.info(\"original fetch performed\", responseClone);\n        this.emitter.emit(\"response\", {\n          response: responseClone,\n          isMockedResponse: false,\n          request: interactiveRequest,\n          requestId\n        });\n        return response;\n      });\n    };\n    Object.defineProperty(globalThis.fetch, _chunk_HAGW22AN_mjs__WEBPACK_IMPORTED_MODULE_1__.IS_PATCHED_MODULE, {\n      enumerable: true,\n      configurable: true,\n      value: true\n    });\n    this.subscriptions.push(() => {\n      Object.defineProperty(globalThis.fetch, _chunk_HAGW22AN_mjs__WEBPACK_IMPORTED_MODULE_1__.IS_PATCHED_MODULE, {\n        value: void 0\n      });\n      globalThis.fetch = pureFetch;\n      this.logger.info(\n        'restored native \"globalThis.fetch\"!',\n        globalThis.fetch.name\n      );\n    });\n  }\n};\nvar FetchInterceptor = _FetchInterceptor;\nFetchInterceptor.symbol = Symbol(\"fetch\");\nfunction createNetworkError(cause) {\n  return Object.assign(new TypeError(\"Failed to fetch\"), {\n    cause\n  });\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mswjs/interceptors/lib/node/interceptors/fetch/index.mjs\n");

/***/ })

};
;