"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jest-diff";
exports.ids = ["vendor-chunks/jest-diff"];
exports.modules = {

/***/ "(ssr)/./node_modules/jest-diff/build/cleanupSemantic.js":
/*!*********************************************************!*\
  !*** ./node_modules/jest-diff/build/cleanupSemantic.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.cleanupSemantic =\n  exports.Diff =\n  exports.DIFF_INSERT =\n  exports.DIFF_EQUAL =\n  exports.DIFF_DELETE =\n    void 0;\n/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * CHANGES by pedrottimark to diff_match_patch_uncompressed.ts file:\n *\n * 1. Delete anything not needed to use diff_cleanupSemantic method\n * 2. Convert from prototype properties to var declarations\n * 3. Convert Diff to class from constructor and prototype\n * 4. Add type annotations for arguments and return values\n * 5. Add exports\n */\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nexports.DIFF_DELETE = DIFF_DELETE;\nvar DIFF_INSERT = 1;\nexports.DIFF_INSERT = DIFF_INSERT;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * Attempts to look like a two-element array (which is what this used to be).\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\nexports.DIFF_EQUAL = DIFF_EQUAL;\nclass Diff {\n  0;\n  1;\n  constructor(op, text) {\n    this[0] = op;\n    this[1] = text;\n  }\n}\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nexports.Diff = Diff;\nvar diff_commonPrefix = function (text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(pointerstart, pointermid) ==\n      text2.substring(pointerstart, pointermid)\n    ) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nvar diff_commonSuffix = function (text1, text2) {\n  // Quick check for common null cases.\n  if (\n    !text1 ||\n    !text2 ||\n    text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)\n  ) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n      text2.substring(text2.length - pointermid, text2.length - pointerend)\n    ) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\nvar diff_commonOverlap_ = function (text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (\n      found == 0 ||\n      text1.substring(text_length - length) == text2.substring(0, length)\n    ) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\nvar diff_cleanupSemantic = function (diffs) {\n  var changes = false;\n  var equalities = []; // Stack of indices where equalities are found.\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0; // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {\n      // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {\n      // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (\n        lastEquality &&\n        lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1) &&\n        lastEquality.length <= Math.max(length_insertions2, length_deletions2)\n      ) {\n        // Duplicate record.\n        diffs.splice(\n          equalities[equalitiesLength - 1],\n          0,\n          new Diff(DIFF_DELETE, lastEquality)\n        );\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0; // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    diff_cleanupMerge(diffs);\n  }\n  diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (\n      diffs[pointer - 1][0] == DIFF_DELETE &&\n      diffs[pointer][0] == DIFF_INSERT\n    ) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (\n          overlap_length1 >= deletion.length / 2 ||\n          overlap_length1 >= insertion.length / 2\n        ) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(\n            pointer,\n            0,\n            new Diff(DIFF_EQUAL, insertion.substring(0, overlap_length1))\n          );\n          diffs[pointer - 1][1] = deletion.substring(\n            0,\n            deletion.length - overlap_length1\n          );\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (\n          overlap_length2 >= deletion.length / 2 ||\n          overlap_length2 >= insertion.length / 2\n        ) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(\n            pointer,\n            0,\n            new Diff(DIFF_EQUAL, deletion.substring(0, overlap_length2))\n          );\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] = insertion.substring(\n            0,\n            insertion.length - overlap_length2\n          );\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] = deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\nexports.cleanupSemantic = diff_cleanupSemantic;\nvar diff_cleanupSemanticLossless = function (diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex_);\n    var lineBreak1 = whitespace1 && char1.match(linebreakRegex_);\n    var lineBreak2 = whitespace2 && char2.match(linebreakRegex_);\n    var blankLine1 = lineBreak1 && one.match(blanklineEndRegex_);\n    var blankLine2 = lineBreak2 && two.match(blanklineStartRegex_);\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (\n      diffs[pointer - 1][0] == DIFF_EQUAL &&\n      diffs[pointer + 1][0] == DIFF_EQUAL\n    ) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore =\n        diff_cleanupSemanticScore_(equality1, edit) +\n        diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score =\n          diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\nvar nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\nvar whitespaceRegex_ = /\\s/;\nvar linebreakRegex_ = /[\\r\\n]/;\nvar blanklineEndRegex_ = /\\n\\r?\\n$/;\nvar blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\nvar diff_cleanupMerge = function (diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (\n                pointer - count_delete - count_insert > 0 &&\n                diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL\n              ) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                  text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(\n                  0,\n                  0,\n                  new Diff(DIFF_EQUAL, text_insert.substring(0, commonlength))\n                );\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] =\n                text_insert.substring(text_insert.length - commonlength) +\n                diffs[pointer][1];\n              text_insert = text_insert.substring(\n                0,\n                text_insert.length - commonlength\n              );\n              text_delete = text_delete.substring(\n                0,\n                text_delete.length - commonlength\n              );\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0, new Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0, new Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop(); // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (\n      diffs[pointer - 1][0] == DIFF_EQUAL &&\n      diffs[pointer + 1][0] == DIFF_EQUAL\n    ) {\n      // This is a single edit surrounded by equalities.\n      if (\n        diffs[pointer][1].substring(\n          diffs[pointer][1].length - diffs[pointer - 1][1].length\n        ) == diffs[pointer - 1][1]\n      ) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] =\n          diffs[pointer - 1][1] +\n          diffs[pointer][1].substring(\n            0,\n            diffs[pointer][1].length - diffs[pointer - 1][1].length\n          );\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (\n        diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n        diffs[pointer + 1][1]\n      ) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n          diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n          diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jest-diff/build/cleanupSemantic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jest-diff/build/constants.js":
/*!***************************************************!*\
  !*** ./node_modules/jest-diff/build/constants.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SIMILAR_MESSAGE = exports.NO_DIFF_MESSAGE = void 0;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst NO_DIFF_MESSAGE = 'Compared values have no visual difference.';\nexports.NO_DIFF_MESSAGE = NO_DIFF_MESSAGE;\nconst SIMILAR_MESSAGE =\n  'Compared values serialize to the same structure.\\n' +\n  'Printing internal object structure without calling `toJSON` instead.';\nexports.SIMILAR_MESSAGE = SIMILAR_MESSAGE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvamVzdC1kaWZmL2J1aWxkL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRix1QkFBdUIsR0FBRyx1QkFBdUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2RlbW8tbG9naW4vLi9ub2RlX21vZHVsZXMvamVzdC1kaWZmL2J1aWxkL2NvbnN0YW50cy5qcz83M2E2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNJTUlMQVJfTUVTU0FHRSA9IGV4cG9ydHMuTk9fRElGRl9NRVNTQUdFID0gdm9pZCAwO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNvbnN0IE5PX0RJRkZfTUVTU0FHRSA9ICdDb21wYXJlZCB2YWx1ZXMgaGF2ZSBubyB2aXN1YWwgZGlmZmVyZW5jZS4nO1xuZXhwb3J0cy5OT19ESUZGX01FU1NBR0UgPSBOT19ESUZGX01FU1NBR0U7XG5jb25zdCBTSU1JTEFSX01FU1NBR0UgPVxuICAnQ29tcGFyZWQgdmFsdWVzIHNlcmlhbGl6ZSB0byB0aGUgc2FtZSBzdHJ1Y3R1cmUuXFxuJyArXG4gICdQcmludGluZyBpbnRlcm5hbCBvYmplY3Qgc3RydWN0dXJlIHdpdGhvdXQgY2FsbGluZyBgdG9KU09OYCBpbnN0ZWFkLic7XG5leHBvcnRzLlNJTUlMQVJfTUVTU0FHRSA9IFNJTUlMQVJfTUVTU0FHRTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jest-diff/build/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jest-diff/build/diffLines.js":
/*!***************************************************!*\
  !*** ./node_modules/jest-diff/build/diffLines.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.printDiffLines =\n  exports.diffLinesUnified2 =\n  exports.diffLinesUnified =\n  exports.diffLinesRaw =\n    void 0;\nvar _diffSequences = _interopRequireDefault(__webpack_require__(/*! diff-sequences */ \"(ssr)/./node_modules/diff-sequences/build/index.js\"));\nvar _cleanupSemantic = __webpack_require__(/*! ./cleanupSemantic */ \"(ssr)/./node_modules/jest-diff/build/cleanupSemantic.js\");\nvar _joinAlignedDiffs = __webpack_require__(/*! ./joinAlignedDiffs */ \"(ssr)/./node_modules/jest-diff/build/joinAlignedDiffs.js\");\nvar _normalizeDiffOptions = __webpack_require__(/*! ./normalizeDiffOptions */ \"(ssr)/./node_modules/jest-diff/build/normalizeDiffOptions.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst isEmptyString = lines => lines.length === 1 && lines[0].length === 0;\nconst countChanges = diffs => {\n  let a = 0;\n  let b = 0;\n  diffs.forEach(diff => {\n    switch (diff[0]) {\n      case _cleanupSemantic.DIFF_DELETE:\n        a += 1;\n        break;\n      case _cleanupSemantic.DIFF_INSERT:\n        b += 1;\n        break;\n    }\n  });\n  return {\n    a,\n    b\n  };\n};\nconst printAnnotation = (\n  {\n    aAnnotation,\n    aColor,\n    aIndicator,\n    bAnnotation,\n    bColor,\n    bIndicator,\n    includeChangeCounts,\n    omitAnnotationLines\n  },\n  changeCounts\n) => {\n  if (omitAnnotationLines) {\n    return '';\n  }\n  let aRest = '';\n  let bRest = '';\n  if (includeChangeCounts) {\n    const aCount = String(changeCounts.a);\n    const bCount = String(changeCounts.b);\n\n    // Padding right aligns the ends of the annotations.\n    const baAnnotationLengthDiff = bAnnotation.length - aAnnotation.length;\n    const aAnnotationPadding = ' '.repeat(Math.max(0, baAnnotationLengthDiff));\n    const bAnnotationPadding = ' '.repeat(Math.max(0, -baAnnotationLengthDiff));\n\n    // Padding left aligns the ends of the counts.\n    const baCountLengthDiff = bCount.length - aCount.length;\n    const aCountPadding = ' '.repeat(Math.max(0, baCountLengthDiff));\n    const bCountPadding = ' '.repeat(Math.max(0, -baCountLengthDiff));\n    aRest = `${aAnnotationPadding}  ${aIndicator} ${aCountPadding}${aCount}`;\n    bRest = `${bAnnotationPadding}  ${bIndicator} ${bCountPadding}${bCount}`;\n  }\n  const a = `${aIndicator} ${aAnnotation}${aRest}`;\n  const b = `${bIndicator} ${bAnnotation}${bRest}`;\n  return `${aColor(a)}\\n${bColor(b)}\\n\\n`;\n};\nconst printDiffLines = (diffs, options) =>\n  printAnnotation(options, countChanges(diffs)) +\n  (options.expand\n    ? (0, _joinAlignedDiffs.joinAlignedDiffsExpand)(diffs, options)\n    : (0, _joinAlignedDiffs.joinAlignedDiffsNoExpand)(diffs, options));\n\n// Compare two arrays of strings line-by-line. Format as comparison lines.\nexports.printDiffLines = printDiffLines;\nconst diffLinesUnified = (aLines, bLines, options) =>\n  printDiffLines(\n    diffLinesRaw(\n      isEmptyString(aLines) ? [] : aLines,\n      isEmptyString(bLines) ? [] : bLines\n    ),\n    (0, _normalizeDiffOptions.normalizeDiffOptions)(options)\n  );\n\n// Given two pairs of arrays of strings:\n// Compare the pair of comparison arrays line-by-line.\n// Format the corresponding lines in the pair of displayable arrays.\nexports.diffLinesUnified = diffLinesUnified;\nconst diffLinesUnified2 = (\n  aLinesDisplay,\n  bLinesDisplay,\n  aLinesCompare,\n  bLinesCompare,\n  options\n) => {\n  if (isEmptyString(aLinesDisplay) && isEmptyString(aLinesCompare)) {\n    aLinesDisplay = [];\n    aLinesCompare = [];\n  }\n  if (isEmptyString(bLinesDisplay) && isEmptyString(bLinesCompare)) {\n    bLinesDisplay = [];\n    bLinesCompare = [];\n  }\n  if (\n    aLinesDisplay.length !== aLinesCompare.length ||\n    bLinesDisplay.length !== bLinesCompare.length\n  ) {\n    // Fall back to diff of display lines.\n    return diffLinesUnified(aLinesDisplay, bLinesDisplay, options);\n  }\n  const diffs = diffLinesRaw(aLinesCompare, bLinesCompare);\n\n  // Replace comparison lines with displayable lines.\n  let aIndex = 0;\n  let bIndex = 0;\n  diffs.forEach(diff => {\n    switch (diff[0]) {\n      case _cleanupSemantic.DIFF_DELETE:\n        diff[1] = aLinesDisplay[aIndex];\n        aIndex += 1;\n        break;\n      case _cleanupSemantic.DIFF_INSERT:\n        diff[1] = bLinesDisplay[bIndex];\n        bIndex += 1;\n        break;\n      default:\n        diff[1] = bLinesDisplay[bIndex];\n        aIndex += 1;\n        bIndex += 1;\n    }\n  });\n  return printDiffLines(\n    diffs,\n    (0, _normalizeDiffOptions.normalizeDiffOptions)(options)\n  );\n};\n\n// Compare two arrays of strings line-by-line.\nexports.diffLinesUnified2 = diffLinesUnified2;\nconst diffLinesRaw = (aLines, bLines) => {\n  const aLength = aLines.length;\n  const bLength = bLines.length;\n  const isCommon = (aIndex, bIndex) => aLines[aIndex] === bLines[bIndex];\n  const diffs = [];\n  let aIndex = 0;\n  let bIndex = 0;\n  const foundSubsequence = (nCommon, aCommon, bCommon) => {\n    for (; aIndex !== aCommon; aIndex += 1) {\n      diffs.push(\n        new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, aLines[aIndex])\n      );\n    }\n    for (; bIndex !== bCommon; bIndex += 1) {\n      diffs.push(\n        new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, bLines[bIndex])\n      );\n    }\n    for (; nCommon !== 0; nCommon -= 1, aIndex += 1, bIndex += 1) {\n      diffs.push(\n        new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_EQUAL, bLines[bIndex])\n      );\n    }\n  };\n  (0, _diffSequences.default)(aLength, bLength, isCommon, foundSubsequence);\n\n  // After the last common subsequence, push remaining change items.\n  for (; aIndex !== aLength; aIndex += 1) {\n    diffs.push(\n      new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, aLines[aIndex])\n    );\n  }\n  for (; bIndex !== bLength; bIndex += 1) {\n    diffs.push(\n      new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, bLines[bIndex])\n    );\n  }\n  return diffs;\n};\nexports.diffLinesRaw = diffLinesRaw;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jest-diff/build/diffLines.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jest-diff/build/diffStrings.js":
/*!*****************************************************!*\
  !*** ./node_modules/jest-diff/build/diffStrings.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _diffSequences = _interopRequireDefault(__webpack_require__(/*! diff-sequences */ \"(ssr)/./node_modules/diff-sequences/build/index.js\"));\nvar _cleanupSemantic = __webpack_require__(/*! ./cleanupSemantic */ \"(ssr)/./node_modules/jest-diff/build/cleanupSemantic.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst diffStrings = (a, b) => {\n  const isCommon = (aIndex, bIndex) => a[aIndex] === b[bIndex];\n  let aIndex = 0;\n  let bIndex = 0;\n  const diffs = [];\n  const foundSubsequence = (nCommon, aCommon, bCommon) => {\n    if (aIndex !== aCommon) {\n      diffs.push(\n        new _cleanupSemantic.Diff(\n          _cleanupSemantic.DIFF_DELETE,\n          a.slice(aIndex, aCommon)\n        )\n      );\n    }\n    if (bIndex !== bCommon) {\n      diffs.push(\n        new _cleanupSemantic.Diff(\n          _cleanupSemantic.DIFF_INSERT,\n          b.slice(bIndex, bCommon)\n        )\n      );\n    }\n    aIndex = aCommon + nCommon; // number of characters compared in a\n    bIndex = bCommon + nCommon; // number of characters compared in b\n    diffs.push(\n      new _cleanupSemantic.Diff(\n        _cleanupSemantic.DIFF_EQUAL,\n        b.slice(bCommon, bIndex)\n      )\n    );\n  };\n  (0, _diffSequences.default)(a.length, b.length, isCommon, foundSubsequence);\n\n  // After the last common subsequence, push remaining change items.\n  if (aIndex !== a.length) {\n    diffs.push(\n      new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, a.slice(aIndex))\n    );\n  }\n  if (bIndex !== b.length) {\n    diffs.push(\n      new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, b.slice(bIndex))\n    );\n  }\n  return diffs;\n};\nvar _default = diffStrings;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvamVzdC1kaWZmL2J1aWxkL2RpZmZTdHJpbmdzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFlO0FBQ2YsNENBQTRDLG1CQUFPLENBQUMsMEVBQWdCO0FBQ3BFLHVCQUF1QixtQkFBTyxDQUFDLGtGQUFtQjtBQUNsRDtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZW1vLWxvZ2luLy4vbm9kZV9tb2R1bGVzL2plc3QtZGlmZi9idWlsZC9kaWZmU3RyaW5ncy5qcz84ZDdhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2RpZmZTZXF1ZW5jZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoJ2RpZmYtc2VxdWVuY2VzJykpO1xudmFyIF9jbGVhbnVwU2VtYW50aWMgPSByZXF1aXJlKCcuL2NsZWFudXBTZW1hbnRpYycpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtkZWZhdWx0OiBvYmp9O1xufVxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNvbnN0IGRpZmZTdHJpbmdzID0gKGEsIGIpID0+IHtcbiAgY29uc3QgaXNDb21tb24gPSAoYUluZGV4LCBiSW5kZXgpID0+IGFbYUluZGV4XSA9PT0gYltiSW5kZXhdO1xuICBsZXQgYUluZGV4ID0gMDtcbiAgbGV0IGJJbmRleCA9IDA7XG4gIGNvbnN0IGRpZmZzID0gW107XG4gIGNvbnN0IGZvdW5kU3Vic2VxdWVuY2UgPSAobkNvbW1vbiwgYUNvbW1vbiwgYkNvbW1vbikgPT4ge1xuICAgIGlmIChhSW5kZXggIT09IGFDb21tb24pIHtcbiAgICAgIGRpZmZzLnB1c2goXG4gICAgICAgIG5ldyBfY2xlYW51cFNlbWFudGljLkRpZmYoXG4gICAgICAgICAgX2NsZWFudXBTZW1hbnRpYy5ESUZGX0RFTEVURSxcbiAgICAgICAgICBhLnNsaWNlKGFJbmRleCwgYUNvbW1vbilcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGJJbmRleCAhPT0gYkNvbW1vbikge1xuICAgICAgZGlmZnMucHVzaChcbiAgICAgICAgbmV3IF9jbGVhbnVwU2VtYW50aWMuRGlmZihcbiAgICAgICAgICBfY2xlYW51cFNlbWFudGljLkRJRkZfSU5TRVJULFxuICAgICAgICAgIGIuc2xpY2UoYkluZGV4LCBiQ29tbW9uKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgICBhSW5kZXggPSBhQ29tbW9uICsgbkNvbW1vbjsgLy8gbnVtYmVyIG9mIGNoYXJhY3RlcnMgY29tcGFyZWQgaW4gYVxuICAgIGJJbmRleCA9IGJDb21tb24gKyBuQ29tbW9uOyAvLyBudW1iZXIgb2YgY2hhcmFjdGVycyBjb21wYXJlZCBpbiBiXG4gICAgZGlmZnMucHVzaChcbiAgICAgIG5ldyBfY2xlYW51cFNlbWFudGljLkRpZmYoXG4gICAgICAgIF9jbGVhbnVwU2VtYW50aWMuRElGRl9FUVVBTCxcbiAgICAgICAgYi5zbGljZShiQ29tbW9uLCBiSW5kZXgpXG4gICAgICApXG4gICAgKTtcbiAgfTtcbiAgKDAsIF9kaWZmU2VxdWVuY2VzLmRlZmF1bHQpKGEubGVuZ3RoLCBiLmxlbmd0aCwgaXNDb21tb24sIGZvdW5kU3Vic2VxdWVuY2UpO1xuXG4gIC8vIEFmdGVyIHRoZSBsYXN0IGNvbW1vbiBzdWJzZXF1ZW5jZSwgcHVzaCByZW1haW5pbmcgY2hhbmdlIGl0ZW1zLlxuICBpZiAoYUluZGV4ICE9PSBhLmxlbmd0aCkge1xuICAgIGRpZmZzLnB1c2goXG4gICAgICBuZXcgX2NsZWFudXBTZW1hbnRpYy5EaWZmKF9jbGVhbnVwU2VtYW50aWMuRElGRl9ERUxFVEUsIGEuc2xpY2UoYUluZGV4KSlcbiAgICApO1xuICB9XG4gIGlmIChiSW5kZXggIT09IGIubGVuZ3RoKSB7XG4gICAgZGlmZnMucHVzaChcbiAgICAgIG5ldyBfY2xlYW51cFNlbWFudGljLkRpZmYoX2NsZWFudXBTZW1hbnRpYy5ESUZGX0lOU0VSVCwgYi5zbGljZShiSW5kZXgpKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGRpZmZzO1xufTtcbnZhciBfZGVmYXVsdCA9IGRpZmZTdHJpbmdzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jest-diff/build/diffStrings.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jest-diff/build/getAlignedDiffs.js":
/*!*********************************************************!*\
  !*** ./node_modules/jest-diff/build/getAlignedDiffs.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _cleanupSemantic = __webpack_require__(/*! ./cleanupSemantic */ \"(ssr)/./node_modules/jest-diff/build/cleanupSemantic.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// Given change op and array of diffs, return concatenated string:\n// * include common strings\n// * include change strings which have argument op with changeColor\n// * exclude change strings which have opposite op\nconst concatenateRelevantDiffs = (op, diffs, changeColor) =>\n  diffs.reduce(\n    (reduced, diff) =>\n      reduced +\n      (diff[0] === _cleanupSemantic.DIFF_EQUAL\n        ? diff[1]\n        : diff[0] === op && diff[1].length !== 0 // empty if change is newline\n        ? changeColor(diff[1])\n        : ''),\n    ''\n  );\n\n// Encapsulate change lines until either a common newline or the end.\nclass ChangeBuffer {\n  op;\n  line; // incomplete line\n  lines; // complete lines\n  changeColor;\n  constructor(op, changeColor) {\n    this.op = op;\n    this.line = [];\n    this.lines = [];\n    this.changeColor = changeColor;\n  }\n  pushSubstring(substring) {\n    this.pushDiff(new _cleanupSemantic.Diff(this.op, substring));\n  }\n  pushLine() {\n    // Assume call only if line has at least one diff,\n    // therefore an empty line must have a diff which has an empty string.\n\n    // If line has multiple diffs, then assume it has a common diff,\n    // therefore change diffs have change color;\n    // otherwise then it has line color only.\n    this.lines.push(\n      this.line.length !== 1\n        ? new _cleanupSemantic.Diff(\n            this.op,\n            concatenateRelevantDiffs(this.op, this.line, this.changeColor)\n          )\n        : this.line[0][0] === this.op\n        ? this.line[0] // can use instance\n        : new _cleanupSemantic.Diff(this.op, this.line[0][1]) // was common diff\n    );\n\n    this.line.length = 0;\n  }\n  isLineEmpty() {\n    return this.line.length === 0;\n  }\n\n  // Minor input to buffer.\n  pushDiff(diff) {\n    this.line.push(diff);\n  }\n\n  // Main input to buffer.\n  align(diff) {\n    const string = diff[1];\n    if (string.includes('\\n')) {\n      const substrings = string.split('\\n');\n      const iLast = substrings.length - 1;\n      substrings.forEach((substring, i) => {\n        if (i < iLast) {\n          // The first substring completes the current change line.\n          // A middle substring is a change line.\n          this.pushSubstring(substring);\n          this.pushLine();\n        } else if (substring.length !== 0) {\n          // The last substring starts a change line, if it is not empty.\n          // Important: This non-empty condition also automatically omits\n          // the newline appended to the end of expected and received strings.\n          this.pushSubstring(substring);\n        }\n      });\n    } else {\n      // Append non-multiline string to current change line.\n      this.pushDiff(diff);\n    }\n  }\n\n  // Output from buffer.\n  moveLinesTo(lines) {\n    if (!this.isLineEmpty()) {\n      this.pushLine();\n    }\n    lines.push(...this.lines);\n    this.lines.length = 0;\n  }\n}\n\n// Encapsulate common and change lines.\nclass CommonBuffer {\n  deleteBuffer;\n  insertBuffer;\n  lines;\n  constructor(deleteBuffer, insertBuffer) {\n    this.deleteBuffer = deleteBuffer;\n    this.insertBuffer = insertBuffer;\n    this.lines = [];\n  }\n  pushDiffCommonLine(diff) {\n    this.lines.push(diff);\n  }\n  pushDiffChangeLines(diff) {\n    const isDiffEmpty = diff[1].length === 0;\n\n    // An empty diff string is redundant, unless a change line is empty.\n    if (!isDiffEmpty || this.deleteBuffer.isLineEmpty()) {\n      this.deleteBuffer.pushDiff(diff);\n    }\n    if (!isDiffEmpty || this.insertBuffer.isLineEmpty()) {\n      this.insertBuffer.pushDiff(diff);\n    }\n  }\n  flushChangeLines() {\n    this.deleteBuffer.moveLinesTo(this.lines);\n    this.insertBuffer.moveLinesTo(this.lines);\n  }\n\n  // Input to buffer.\n  align(diff) {\n    const op = diff[0];\n    const string = diff[1];\n    if (string.includes('\\n')) {\n      const substrings = string.split('\\n');\n      const iLast = substrings.length - 1;\n      substrings.forEach((substring, i) => {\n        if (i === 0) {\n          const subdiff = new _cleanupSemantic.Diff(op, substring);\n          if (\n            this.deleteBuffer.isLineEmpty() &&\n            this.insertBuffer.isLineEmpty()\n          ) {\n            // If both current change lines are empty,\n            // then the first substring is a common line.\n            this.flushChangeLines();\n            this.pushDiffCommonLine(subdiff);\n          } else {\n            // If either current change line is non-empty,\n            // then the first substring completes the change lines.\n            this.pushDiffChangeLines(subdiff);\n            this.flushChangeLines();\n          }\n        } else if (i < iLast) {\n          // A middle substring is a common line.\n          this.pushDiffCommonLine(new _cleanupSemantic.Diff(op, substring));\n        } else if (substring.length !== 0) {\n          // The last substring starts a change line, if it is not empty.\n          // Important: This non-empty condition also automatically omits\n          // the newline appended to the end of expected and received strings.\n          this.pushDiffChangeLines(new _cleanupSemantic.Diff(op, substring));\n        }\n      });\n    } else {\n      // Append non-multiline string to current change lines.\n      // Important: It cannot be at the end following empty change lines,\n      // because newline appended to the end of expected and received strings.\n      this.pushDiffChangeLines(diff);\n    }\n  }\n\n  // Output from buffer.\n  getLines() {\n    this.flushChangeLines();\n    return this.lines;\n  }\n}\n\n// Given diffs from expected and received strings,\n// return new array of diffs split or joined into lines.\n//\n// To correctly align a change line at the end, the algorithm:\n// * assumes that a newline was appended to the strings\n// * omits the last newline from the output array\n//\n// Assume the function is not called:\n// * if either expected or received is empty string\n// * if neither expected nor received is multiline string\nconst getAlignedDiffs = (diffs, changeColor) => {\n  const deleteBuffer = new ChangeBuffer(\n    _cleanupSemantic.DIFF_DELETE,\n    changeColor\n  );\n  const insertBuffer = new ChangeBuffer(\n    _cleanupSemantic.DIFF_INSERT,\n    changeColor\n  );\n  const commonBuffer = new CommonBuffer(deleteBuffer, insertBuffer);\n  diffs.forEach(diff => {\n    switch (diff[0]) {\n      case _cleanupSemantic.DIFF_DELETE:\n        deleteBuffer.align(diff);\n        break;\n      case _cleanupSemantic.DIFF_INSERT:\n        insertBuffer.align(diff);\n        break;\n      default:\n        commonBuffer.align(diff);\n    }\n  });\n  return commonBuffer.getLines();\n};\nvar _default = getAlignedDiffs;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jest-diff/build/getAlignedDiffs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jest-diff/build/index.js":
/*!***********************************************!*\
  !*** ./node_modules/jest-diff/build/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"DIFF_DELETE\", ({\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.DIFF_DELETE;\n  }\n}));\nObject.defineProperty(exports, \"DIFF_EQUAL\", ({\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.DIFF_EQUAL;\n  }\n}));\nObject.defineProperty(exports, \"DIFF_INSERT\", ({\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.DIFF_INSERT;\n  }\n}));\nObject.defineProperty(exports, \"Diff\", ({\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.Diff;\n  }\n}));\nexports.diff = diff;\nObject.defineProperty(exports, \"diffLinesRaw\", ({\n  enumerable: true,\n  get: function () {\n    return _diffLines.diffLinesRaw;\n  }\n}));\nObject.defineProperty(exports, \"diffLinesUnified\", ({\n  enumerable: true,\n  get: function () {\n    return _diffLines.diffLinesUnified;\n  }\n}));\nObject.defineProperty(exports, \"diffLinesUnified2\", ({\n  enumerable: true,\n  get: function () {\n    return _diffLines.diffLinesUnified2;\n  }\n}));\nObject.defineProperty(exports, \"diffStringsRaw\", ({\n  enumerable: true,\n  get: function () {\n    return _printDiffs.diffStringsRaw;\n  }\n}));\nObject.defineProperty(exports, \"diffStringsUnified\", ({\n  enumerable: true,\n  get: function () {\n    return _printDiffs.diffStringsUnified;\n  }\n}));\nvar _chalk = _interopRequireDefault(__webpack_require__(/*! chalk */ \"(ssr)/./node_modules/chalk/source/index.js\"));\nvar _jestGetType = __webpack_require__(/*! jest-get-type */ \"(ssr)/./node_modules/jest-get-type/build/index.js\");\nvar _prettyFormat = __webpack_require__(/*! pretty-format */ \"(ssr)/./node_modules/pretty-format/build/index.js\");\nvar _cleanupSemantic = __webpack_require__(/*! ./cleanupSemantic */ \"(ssr)/./node_modules/jest-diff/build/cleanupSemantic.js\");\nvar _constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/jest-diff/build/constants.js\");\nvar _diffLines = __webpack_require__(/*! ./diffLines */ \"(ssr)/./node_modules/jest-diff/build/diffLines.js\");\nvar _normalizeDiffOptions = __webpack_require__(/*! ./normalizeDiffOptions */ \"(ssr)/./node_modules/jest-diff/build/normalizeDiffOptions.js\");\nvar _printDiffs = __webpack_require__(/*! ./printDiffs */ \"(ssr)/./node_modules/jest-diff/build/printDiffs.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\nvar Symbol = globalThis['jest-symbol-do-not-touch'] || globalThis.Symbol;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst getCommonMessage = (message, options) => {\n  const {commonColor} = (0, _normalizeDiffOptions.normalizeDiffOptions)(\n    options\n  );\n  return commonColor(message);\n};\nconst {\n  AsymmetricMatcher,\n  DOMCollection,\n  DOMElement,\n  Immutable,\n  ReactElement,\n  ReactTestComponent\n} = _prettyFormat.plugins;\nconst PLUGINS = [\n  ReactTestComponent,\n  ReactElement,\n  DOMElement,\n  DOMCollection,\n  Immutable,\n  AsymmetricMatcher\n];\nconst FORMAT_OPTIONS = {\n  plugins: PLUGINS\n};\nconst FALLBACK_FORMAT_OPTIONS = {\n  callToJSON: false,\n  maxDepth: 10,\n  plugins: PLUGINS\n};\n\n// Generate a string that will highlight the difference between two values\n// with green and red. (similar to how github does code diffing)\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction diff(a, b, options) {\n  if (Object.is(a, b)) {\n    return getCommonMessage(_constants.NO_DIFF_MESSAGE, options);\n  }\n  const aType = (0, _jestGetType.getType)(a);\n  let expectedType = aType;\n  let omitDifference = false;\n  if (aType === 'object' && typeof a.asymmetricMatch === 'function') {\n    if (a.$$typeof !== Symbol.for('jest.asymmetricMatcher')) {\n      // Do not know expected type of user-defined asymmetric matcher.\n      return null;\n    }\n    if (typeof a.getExpectedType !== 'function') {\n      // For example, expect.anything() matches either null or undefined\n      return null;\n    }\n    expectedType = a.getExpectedType();\n    // Primitive types boolean and number omit difference below.\n    // For example, omit difference for expect.stringMatching(regexp)\n    omitDifference = expectedType === 'string';\n  }\n  if (expectedType !== (0, _jestGetType.getType)(b)) {\n    return (\n      '  Comparing two different types of values.' +\n      ` Expected ${_chalk.default.green(expectedType)} but ` +\n      `received ${_chalk.default.red((0, _jestGetType.getType)(b))}.`\n    );\n  }\n  if (omitDifference) {\n    return null;\n  }\n  switch (aType) {\n    case 'string':\n      return (0, _diffLines.diffLinesUnified)(\n        a.split('\\n'),\n        b.split('\\n'),\n        options\n      );\n    case 'boolean':\n    case 'number':\n      return comparePrimitive(a, b, options);\n    case 'map':\n      return compareObjects(sortMap(a), sortMap(b), options);\n    case 'set':\n      return compareObjects(sortSet(a), sortSet(b), options);\n    default:\n      return compareObjects(a, b, options);\n  }\n}\nfunction comparePrimitive(a, b, options) {\n  const aFormat = (0, _prettyFormat.format)(a, FORMAT_OPTIONS);\n  const bFormat = (0, _prettyFormat.format)(b, FORMAT_OPTIONS);\n  return aFormat === bFormat\n    ? getCommonMessage(_constants.NO_DIFF_MESSAGE, options)\n    : (0, _diffLines.diffLinesUnified)(\n        aFormat.split('\\n'),\n        bFormat.split('\\n'),\n        options\n      );\n}\nfunction sortMap(map) {\n  return new Map(Array.from(map.entries()).sort());\n}\nfunction sortSet(set) {\n  return new Set(Array.from(set.values()).sort());\n}\nfunction compareObjects(a, b, options) {\n  let difference;\n  let hasThrown = false;\n  try {\n    const formatOptions = getFormatOptions(FORMAT_OPTIONS, options);\n    difference = getObjectsDifference(a, b, formatOptions, options);\n  } catch {\n    hasThrown = true;\n  }\n  const noDiffMessage = getCommonMessage(_constants.NO_DIFF_MESSAGE, options);\n  // If the comparison yields no results, compare again but this time\n  // without calling `toJSON`. It's also possible that toJSON might throw.\n  if (difference === undefined || difference === noDiffMessage) {\n    const formatOptions = getFormatOptions(FALLBACK_FORMAT_OPTIONS, options);\n    difference = getObjectsDifference(a, b, formatOptions, options);\n    if (difference !== noDiffMessage && !hasThrown) {\n      difference = `${getCommonMessage(\n        _constants.SIMILAR_MESSAGE,\n        options\n      )}\\n\\n${difference}`;\n    }\n  }\n  return difference;\n}\nfunction getFormatOptions(formatOptions, options) {\n  const {compareKeys} = (0, _normalizeDiffOptions.normalizeDiffOptions)(\n    options\n  );\n  return {\n    ...formatOptions,\n    compareKeys\n  };\n}\nfunction getObjectsDifference(a, b, formatOptions, options) {\n  const formatOptionsZeroIndent = {\n    ...formatOptions,\n    indent: 0\n  };\n  const aCompare = (0, _prettyFormat.format)(a, formatOptionsZeroIndent);\n  const bCompare = (0, _prettyFormat.format)(b, formatOptionsZeroIndent);\n  if (aCompare === bCompare) {\n    return getCommonMessage(_constants.NO_DIFF_MESSAGE, options);\n  } else {\n    const aDisplay = (0, _prettyFormat.format)(a, formatOptions);\n    const bDisplay = (0, _prettyFormat.format)(b, formatOptions);\n    return (0, _diffLines.diffLinesUnified2)(\n      aDisplay.split('\\n'),\n      bDisplay.split('\\n'),\n      aCompare.split('\\n'),\n      bCompare.split('\\n'),\n      options\n    );\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jest-diff/build/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jest-diff/build/joinAlignedDiffs.js":
/*!**********************************************************!*\
  !*** ./node_modules/jest-diff/build/joinAlignedDiffs.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.joinAlignedDiffsNoExpand = exports.joinAlignedDiffsExpand = void 0;\nvar _cleanupSemantic = __webpack_require__(/*! ./cleanupSemantic */ \"(ssr)/./node_modules/jest-diff/build/cleanupSemantic.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst formatTrailingSpaces = (line, trailingSpaceFormatter) =>\n  line.replace(/\\s+$/, match => trailingSpaceFormatter(match));\nconst printDiffLine = (\n  line,\n  isFirstOrLast,\n  color,\n  indicator,\n  trailingSpaceFormatter,\n  emptyFirstOrLastLinePlaceholder\n) =>\n  line.length !== 0\n    ? color(\n        `${indicator} ${formatTrailingSpaces(line, trailingSpaceFormatter)}`\n      )\n    : indicator !== ' '\n    ? color(indicator)\n    : isFirstOrLast && emptyFirstOrLastLinePlaceholder.length !== 0\n    ? color(`${indicator} ${emptyFirstOrLastLinePlaceholder}`)\n    : '';\nconst printDeleteLine = (\n  line,\n  isFirstOrLast,\n  {\n    aColor,\n    aIndicator,\n    changeLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  }\n) =>\n  printDiffLine(\n    line,\n    isFirstOrLast,\n    aColor,\n    aIndicator,\n    changeLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  );\nconst printInsertLine = (\n  line,\n  isFirstOrLast,\n  {\n    bColor,\n    bIndicator,\n    changeLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  }\n) =>\n  printDiffLine(\n    line,\n    isFirstOrLast,\n    bColor,\n    bIndicator,\n    changeLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  );\nconst printCommonLine = (\n  line,\n  isFirstOrLast,\n  {\n    commonColor,\n    commonIndicator,\n    commonLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  }\n) =>\n  printDiffLine(\n    line,\n    isFirstOrLast,\n    commonColor,\n    commonIndicator,\n    commonLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  );\n\n// In GNU diff format, indexes are one-based instead of zero-based.\nconst createPatchMark = (aStart, aEnd, bStart, bEnd, {patchColor}) =>\n  patchColor(\n    `@@ -${aStart + 1},${aEnd - aStart} +${bStart + 1},${bEnd - bStart} @@`\n  );\n\n// jest --no-expand\n//\n// Given array of aligned strings with inverse highlight formatting,\n// return joined lines with diff formatting (and patch marks, if needed).\nconst joinAlignedDiffsNoExpand = (diffs, options) => {\n  const iLength = diffs.length;\n  const nContextLines = options.contextLines;\n  const nContextLines2 = nContextLines + nContextLines;\n\n  // First pass: count output lines and see if it has patches.\n  let jLength = iLength;\n  let hasExcessAtStartOrEnd = false;\n  let nExcessesBetweenChanges = 0;\n  let i = 0;\n  while (i !== iLength) {\n    const iStart = i;\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n    if (iStart !== i) {\n      if (iStart === 0) {\n        // at start\n        if (i > nContextLines) {\n          jLength -= i - nContextLines; // subtract excess common lines\n          hasExcessAtStartOrEnd = true;\n        }\n      } else if (i === iLength) {\n        // at end\n        const n = i - iStart;\n        if (n > nContextLines) {\n          jLength -= n - nContextLines; // subtract excess common lines\n          hasExcessAtStartOrEnd = true;\n        }\n      } else {\n        // between changes\n        const n = i - iStart;\n        if (n > nContextLines2) {\n          jLength -= n - nContextLines2; // subtract excess common lines\n          nExcessesBetweenChanges += 1;\n        }\n      }\n    }\n    while (i !== iLength && diffs[i][0] !== _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n  }\n  const hasPatch = nExcessesBetweenChanges !== 0 || hasExcessAtStartOrEnd;\n  if (nExcessesBetweenChanges !== 0) {\n    jLength += nExcessesBetweenChanges + 1; // add patch lines\n  } else if (hasExcessAtStartOrEnd) {\n    jLength += 1; // add patch line\n  }\n\n  const jLast = jLength - 1;\n  const lines = [];\n  let jPatchMark = 0; // index of placeholder line for current patch mark\n  if (hasPatch) {\n    lines.push(''); // placeholder line for first patch mark\n  }\n\n  // Indexes of expected or received lines in current patch:\n  let aStart = 0;\n  let bStart = 0;\n  let aEnd = 0;\n  let bEnd = 0;\n  const pushCommonLine = line => {\n    const j = lines.length;\n    lines.push(printCommonLine(line, j === 0 || j === jLast, options));\n    aEnd += 1;\n    bEnd += 1;\n  };\n  const pushDeleteLine = line => {\n    const j = lines.length;\n    lines.push(printDeleteLine(line, j === 0 || j === jLast, options));\n    aEnd += 1;\n  };\n  const pushInsertLine = line => {\n    const j = lines.length;\n    lines.push(printInsertLine(line, j === 0 || j === jLast, options));\n    bEnd += 1;\n  };\n\n  // Second pass: push lines with diff formatting (and patch marks, if needed).\n  i = 0;\n  while (i !== iLength) {\n    let iStart = i;\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n    if (iStart !== i) {\n      if (iStart === 0) {\n        // at beginning\n        if (i > nContextLines) {\n          iStart = i - nContextLines;\n          aStart = iStart;\n          bStart = iStart;\n          aEnd = aStart;\n          bEnd = bStart;\n        }\n        for (let iCommon = iStart; iCommon !== i; iCommon += 1) {\n          pushCommonLine(diffs[iCommon][1]);\n        }\n      } else if (i === iLength) {\n        // at end\n        const iEnd = i - iStart > nContextLines ? iStart + nContextLines : i;\n        for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) {\n          pushCommonLine(diffs[iCommon][1]);\n        }\n      } else {\n        // between changes\n        const nCommon = i - iStart;\n        if (nCommon > nContextLines2) {\n          const iEnd = iStart + nContextLines;\n          for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n          lines[jPatchMark] = createPatchMark(\n            aStart,\n            aEnd,\n            bStart,\n            bEnd,\n            options\n          );\n          jPatchMark = lines.length;\n          lines.push(''); // placeholder line for next patch mark\n\n          const nOmit = nCommon - nContextLines2;\n          aStart = aEnd + nOmit;\n          bStart = bEnd + nOmit;\n          aEnd = aStart;\n          bEnd = bStart;\n          for (let iCommon = i - nContextLines; iCommon !== i; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n        } else {\n          for (let iCommon = iStart; iCommon !== i; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n        }\n      }\n    }\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_DELETE) {\n      pushDeleteLine(diffs[i][1]);\n      i += 1;\n    }\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_INSERT) {\n      pushInsertLine(diffs[i][1]);\n      i += 1;\n    }\n  }\n  if (hasPatch) {\n    lines[jPatchMark] = createPatchMark(aStart, aEnd, bStart, bEnd, options);\n  }\n  return lines.join('\\n');\n};\n\n// jest --expand\n//\n// Given array of aligned strings with inverse highlight formatting,\n// return joined lines with diff formatting.\nexports.joinAlignedDiffsNoExpand = joinAlignedDiffsNoExpand;\nconst joinAlignedDiffsExpand = (diffs, options) =>\n  diffs\n    .map((diff, i, diffs) => {\n      const line = diff[1];\n      const isFirstOrLast = i === 0 || i === diffs.length - 1;\n      switch (diff[0]) {\n        case _cleanupSemantic.DIFF_DELETE:\n          return printDeleteLine(line, isFirstOrLast, options);\n        case _cleanupSemantic.DIFF_INSERT:\n          return printInsertLine(line, isFirstOrLast, options);\n        default:\n          return printCommonLine(line, isFirstOrLast, options);\n      }\n    })\n    .join('\\n');\nexports.joinAlignedDiffsExpand = joinAlignedDiffsExpand;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jest-diff/build/joinAlignedDiffs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jest-diff/build/normalizeDiffOptions.js":
/*!**************************************************************!*\
  !*** ./node_modules/jest-diff/build/normalizeDiffOptions.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.normalizeDiffOptions = exports.noColor = void 0;\nvar _chalk = _interopRequireDefault(__webpack_require__(/*! chalk */ \"(ssr)/./node_modules/chalk/source/index.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst noColor = string => string;\nexports.noColor = noColor;\nconst DIFF_CONTEXT_DEFAULT = 5;\nconst OPTIONS_DEFAULT = {\n  aAnnotation: 'Expected',\n  aColor: _chalk.default.green,\n  aIndicator: '-',\n  bAnnotation: 'Received',\n  bColor: _chalk.default.red,\n  bIndicator: '+',\n  changeColor: _chalk.default.inverse,\n  changeLineTrailingSpaceColor: noColor,\n  commonColor: _chalk.default.dim,\n  commonIndicator: ' ',\n  commonLineTrailingSpaceColor: noColor,\n  compareKeys: undefined,\n  contextLines: DIFF_CONTEXT_DEFAULT,\n  emptyFirstOrLastLinePlaceholder: '',\n  expand: true,\n  includeChangeCounts: false,\n  omitAnnotationLines: false,\n  patchColor: _chalk.default.yellow\n};\nconst getCompareKeys = compareKeys =>\n  compareKeys && typeof compareKeys === 'function'\n    ? compareKeys\n    : OPTIONS_DEFAULT.compareKeys;\nconst getContextLines = contextLines =>\n  typeof contextLines === 'number' &&\n  Number.isSafeInteger(contextLines) &&\n  contextLines >= 0\n    ? contextLines\n    : DIFF_CONTEXT_DEFAULT;\n\n// Pure function returns options with all properties.\nconst normalizeDiffOptions = (options = {}) => ({\n  ...OPTIONS_DEFAULT,\n  ...options,\n  compareKeys: getCompareKeys(options.compareKeys),\n  contextLines: getContextLines(options.contextLines)\n});\nexports.normalizeDiffOptions = normalizeDiffOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvamVzdC1kaWZmL2J1aWxkL25vcm1hbGl6ZURpZmZPcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDRCQUE0QixHQUFHLGVBQWU7QUFDOUMsb0NBQW9DLG1CQUFPLENBQUMseURBQU87QUFDbkQ7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsNEJBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVtby1sb2dpbi8uL25vZGVfbW9kdWxlcy9qZXN0LWRpZmYvYnVpbGQvbm9ybWFsaXplRGlmZk9wdGlvbnMuanM/YzAyMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5ub3JtYWxpemVEaWZmT3B0aW9ucyA9IGV4cG9ydHMubm9Db2xvciA9IHZvaWQgMDtcbnZhciBfY2hhbGsgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoJ2NoYWxrJykpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtkZWZhdWx0OiBvYmp9O1xufVxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNvbnN0IG5vQ29sb3IgPSBzdHJpbmcgPT4gc3RyaW5nO1xuZXhwb3J0cy5ub0NvbG9yID0gbm9Db2xvcjtcbmNvbnN0IERJRkZfQ09OVEVYVF9ERUZBVUxUID0gNTtcbmNvbnN0IE9QVElPTlNfREVGQVVMVCA9IHtcbiAgYUFubm90YXRpb246ICdFeHBlY3RlZCcsXG4gIGFDb2xvcjogX2NoYWxrLmRlZmF1bHQuZ3JlZW4sXG4gIGFJbmRpY2F0b3I6ICctJyxcbiAgYkFubm90YXRpb246ICdSZWNlaXZlZCcsXG4gIGJDb2xvcjogX2NoYWxrLmRlZmF1bHQucmVkLFxuICBiSW5kaWNhdG9yOiAnKycsXG4gIGNoYW5nZUNvbG9yOiBfY2hhbGsuZGVmYXVsdC5pbnZlcnNlLFxuICBjaGFuZ2VMaW5lVHJhaWxpbmdTcGFjZUNvbG9yOiBub0NvbG9yLFxuICBjb21tb25Db2xvcjogX2NoYWxrLmRlZmF1bHQuZGltLFxuICBjb21tb25JbmRpY2F0b3I6ICcgJyxcbiAgY29tbW9uTGluZVRyYWlsaW5nU3BhY2VDb2xvcjogbm9Db2xvcixcbiAgY29tcGFyZUtleXM6IHVuZGVmaW5lZCxcbiAgY29udGV4dExpbmVzOiBESUZGX0NPTlRFWFRfREVGQVVMVCxcbiAgZW1wdHlGaXJzdE9yTGFzdExpbmVQbGFjZWhvbGRlcjogJycsXG4gIGV4cGFuZDogdHJ1ZSxcbiAgaW5jbHVkZUNoYW5nZUNvdW50czogZmFsc2UsXG4gIG9taXRBbm5vdGF0aW9uTGluZXM6IGZhbHNlLFxuICBwYXRjaENvbG9yOiBfY2hhbGsuZGVmYXVsdC55ZWxsb3dcbn07XG5jb25zdCBnZXRDb21wYXJlS2V5cyA9IGNvbXBhcmVLZXlzID0+XG4gIGNvbXBhcmVLZXlzICYmIHR5cGVvZiBjb21wYXJlS2V5cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gY29tcGFyZUtleXNcbiAgICA6IE9QVElPTlNfREVGQVVMVC5jb21wYXJlS2V5cztcbmNvbnN0IGdldENvbnRleHRMaW5lcyA9IGNvbnRleHRMaW5lcyA9PlxuICB0eXBlb2YgY29udGV4dExpbmVzID09PSAnbnVtYmVyJyAmJlxuICBOdW1iZXIuaXNTYWZlSW50ZWdlcihjb250ZXh0TGluZXMpICYmXG4gIGNvbnRleHRMaW5lcyA+PSAwXG4gICAgPyBjb250ZXh0TGluZXNcbiAgICA6IERJRkZfQ09OVEVYVF9ERUZBVUxUO1xuXG4vLyBQdXJlIGZ1bmN0aW9uIHJldHVybnMgb3B0aW9ucyB3aXRoIGFsbCBwcm9wZXJ0aWVzLlxuY29uc3Qgbm9ybWFsaXplRGlmZk9wdGlvbnMgPSAob3B0aW9ucyA9IHt9KSA9PiAoe1xuICAuLi5PUFRJT05TX0RFRkFVTFQsXG4gIC4uLm9wdGlvbnMsXG4gIGNvbXBhcmVLZXlzOiBnZXRDb21wYXJlS2V5cyhvcHRpb25zLmNvbXBhcmVLZXlzKSxcbiAgY29udGV4dExpbmVzOiBnZXRDb250ZXh0TGluZXMob3B0aW9ucy5jb250ZXh0TGluZXMpXG59KTtcbmV4cG9ydHMubm9ybWFsaXplRGlmZk9wdGlvbnMgPSBub3JtYWxpemVEaWZmT3B0aW9ucztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jest-diff/build/normalizeDiffOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jest-diff/build/printDiffs.js":
/*!****************************************************!*\
  !*** ./node_modules/jest-diff/build/printDiffs.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.diffStringsUnified = exports.diffStringsRaw = void 0;\nvar _cleanupSemantic = __webpack_require__(/*! ./cleanupSemantic */ \"(ssr)/./node_modules/jest-diff/build/cleanupSemantic.js\");\nvar _diffLines = __webpack_require__(/*! ./diffLines */ \"(ssr)/./node_modules/jest-diff/build/diffLines.js\");\nvar _diffStrings = _interopRequireDefault(__webpack_require__(/*! ./diffStrings */ \"(ssr)/./node_modules/jest-diff/build/diffStrings.js\"));\nvar _getAlignedDiffs = _interopRequireDefault(__webpack_require__(/*! ./getAlignedDiffs */ \"(ssr)/./node_modules/jest-diff/build/getAlignedDiffs.js\"));\nvar _normalizeDiffOptions = __webpack_require__(/*! ./normalizeDiffOptions */ \"(ssr)/./node_modules/jest-diff/build/normalizeDiffOptions.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst hasCommonDiff = (diffs, isMultiline) => {\n  if (isMultiline) {\n    // Important: Ignore common newline that was appended to multiline strings!\n    const iLast = diffs.length - 1;\n    return diffs.some(\n      (diff, i) =>\n        diff[0] === _cleanupSemantic.DIFF_EQUAL &&\n        (i !== iLast || diff[1] !== '\\n')\n    );\n  }\n  return diffs.some(diff => diff[0] === _cleanupSemantic.DIFF_EQUAL);\n};\n\n// Compare two strings character-by-character.\n// Format as comparison lines in which changed substrings have inverse colors.\nconst diffStringsUnified = (a, b, options) => {\n  if (a !== b && a.length !== 0 && b.length !== 0) {\n    const isMultiline = a.includes('\\n') || b.includes('\\n');\n\n    // getAlignedDiffs assumes that a newline was appended to the strings.\n    const diffs = diffStringsRaw(\n      isMultiline ? `${a}\\n` : a,\n      isMultiline ? `${b}\\n` : b,\n      true // cleanupSemantic\n    );\n\n    if (hasCommonDiff(diffs, isMultiline)) {\n      const optionsNormalized = (0, _normalizeDiffOptions.normalizeDiffOptions)(\n        options\n      );\n      const lines = (0, _getAlignedDiffs.default)(\n        diffs,\n        optionsNormalized.changeColor\n      );\n      return (0, _diffLines.printDiffLines)(lines, optionsNormalized);\n    }\n  }\n\n  // Fall back to line-by-line diff.\n  return (0, _diffLines.diffLinesUnified)(\n    a.split('\\n'),\n    b.split('\\n'),\n    options\n  );\n};\n\n// Compare two strings character-by-character.\n// Optionally clean up small common substrings, also known as chaff.\nexports.diffStringsUnified = diffStringsUnified;\nconst diffStringsRaw = (a, b, cleanup) => {\n  const diffs = (0, _diffStrings.default)(a, b);\n  if (cleanup) {\n    (0, _cleanupSemantic.cleanupSemantic)(diffs); // impure function\n  }\n\n  return diffs;\n};\nexports.diffStringsRaw = diffStringsRaw;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvamVzdC1kaWZmL2J1aWxkL3ByaW50RGlmZnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsMEJBQTBCLEdBQUcsc0JBQXNCO0FBQ25ELHVCQUF1QixtQkFBTyxDQUFDLGtGQUFtQjtBQUNsRCxpQkFBaUIsbUJBQU8sQ0FBQyxzRUFBYTtBQUN0QywwQ0FBMEMsbUJBQU8sQ0FBQywwRUFBZTtBQUNqRSw4Q0FBOEMsbUJBQU8sQ0FBQyxrRkFBbUI7QUFDekUsNEJBQTRCLG1CQUFPLENBQUMsNEZBQXdCO0FBQzVEO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIsRUFBRTtBQUN6Qix1QkFBdUIsRUFBRTtBQUN6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2RlbW8tbG9naW4vLi9ub2RlX21vZHVsZXMvamVzdC1kaWZmL2J1aWxkL3ByaW50RGlmZnMuanM/MGUzNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kaWZmU3RyaW5nc1VuaWZpZWQgPSBleHBvcnRzLmRpZmZTdHJpbmdzUmF3ID0gdm9pZCAwO1xudmFyIF9jbGVhbnVwU2VtYW50aWMgPSByZXF1aXJlKCcuL2NsZWFudXBTZW1hbnRpYycpO1xudmFyIF9kaWZmTGluZXMgPSByZXF1aXJlKCcuL2RpZmZMaW5lcycpO1xudmFyIF9kaWZmU3RyaW5ncyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgnLi9kaWZmU3RyaW5ncycpKTtcbnZhciBfZ2V0QWxpZ25lZERpZmZzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCcuL2dldEFsaWduZWREaWZmcycpKTtcbnZhciBfbm9ybWFsaXplRGlmZk9wdGlvbnMgPSByZXF1aXJlKCcuL25vcm1hbGl6ZURpZmZPcHRpb25zJyk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge2RlZmF1bHQ6IG9ian07XG59XG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuY29uc3QgaGFzQ29tbW9uRGlmZiA9IChkaWZmcywgaXNNdWx0aWxpbmUpID0+IHtcbiAgaWYgKGlzTXVsdGlsaW5lKSB7XG4gICAgLy8gSW1wb3J0YW50OiBJZ25vcmUgY29tbW9uIG5ld2xpbmUgdGhhdCB3YXMgYXBwZW5kZWQgdG8gbXVsdGlsaW5lIHN0cmluZ3MhXG4gICAgY29uc3QgaUxhc3QgPSBkaWZmcy5sZW5ndGggLSAxO1xuICAgIHJldHVybiBkaWZmcy5zb21lKFxuICAgICAgKGRpZmYsIGkpID0+XG4gICAgICAgIGRpZmZbMF0gPT09IF9jbGVhbnVwU2VtYW50aWMuRElGRl9FUVVBTCAmJlxuICAgICAgICAoaSAhPT0gaUxhc3QgfHwgZGlmZlsxXSAhPT0gJ1xcbicpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gZGlmZnMuc29tZShkaWZmID0+IGRpZmZbMF0gPT09IF9jbGVhbnVwU2VtYW50aWMuRElGRl9FUVVBTCk7XG59O1xuXG4vLyBDb21wYXJlIHR3byBzdHJpbmdzIGNoYXJhY3Rlci1ieS1jaGFyYWN0ZXIuXG4vLyBGb3JtYXQgYXMgY29tcGFyaXNvbiBsaW5lcyBpbiB3aGljaCBjaGFuZ2VkIHN1YnN0cmluZ3MgaGF2ZSBpbnZlcnNlIGNvbG9ycy5cbmNvbnN0IGRpZmZTdHJpbmdzVW5pZmllZCA9IChhLCBiLCBvcHRpb25zKSA9PiB7XG4gIGlmIChhICE9PSBiICYmIGEubGVuZ3RoICE9PSAwICYmIGIubGVuZ3RoICE9PSAwKSB7XG4gICAgY29uc3QgaXNNdWx0aWxpbmUgPSBhLmluY2x1ZGVzKCdcXG4nKSB8fCBiLmluY2x1ZGVzKCdcXG4nKTtcblxuICAgIC8vIGdldEFsaWduZWREaWZmcyBhc3N1bWVzIHRoYXQgYSBuZXdsaW5lIHdhcyBhcHBlbmRlZCB0byB0aGUgc3RyaW5ncy5cbiAgICBjb25zdCBkaWZmcyA9IGRpZmZTdHJpbmdzUmF3KFxuICAgICAgaXNNdWx0aWxpbmUgPyBgJHthfVxcbmAgOiBhLFxuICAgICAgaXNNdWx0aWxpbmUgPyBgJHtifVxcbmAgOiBiLFxuICAgICAgdHJ1ZSAvLyBjbGVhbnVwU2VtYW50aWNcbiAgICApO1xuXG4gICAgaWYgKGhhc0NvbW1vbkRpZmYoZGlmZnMsIGlzTXVsdGlsaW5lKSkge1xuICAgICAgY29uc3Qgb3B0aW9uc05vcm1hbGl6ZWQgPSAoMCwgX25vcm1hbGl6ZURpZmZPcHRpb25zLm5vcm1hbGl6ZURpZmZPcHRpb25zKShcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKTtcbiAgICAgIGNvbnN0IGxpbmVzID0gKDAsIF9nZXRBbGlnbmVkRGlmZnMuZGVmYXVsdCkoXG4gICAgICAgIGRpZmZzLFxuICAgICAgICBvcHRpb25zTm9ybWFsaXplZC5jaGFuZ2VDb2xvclxuICAgICAgKTtcbiAgICAgIHJldHVybiAoMCwgX2RpZmZMaW5lcy5wcmludERpZmZMaW5lcykobGluZXMsIG9wdGlvbnNOb3JtYWxpemVkKTtcbiAgICB9XG4gIH1cblxuICAvLyBGYWxsIGJhY2sgdG8gbGluZS1ieS1saW5lIGRpZmYuXG4gIHJldHVybiAoMCwgX2RpZmZMaW5lcy5kaWZmTGluZXNVbmlmaWVkKShcbiAgICBhLnNwbGl0KCdcXG4nKSxcbiAgICBiLnNwbGl0KCdcXG4nKSxcbiAgICBvcHRpb25zXG4gICk7XG59O1xuXG4vLyBDb21wYXJlIHR3byBzdHJpbmdzIGNoYXJhY3Rlci1ieS1jaGFyYWN0ZXIuXG4vLyBPcHRpb25hbGx5IGNsZWFuIHVwIHNtYWxsIGNvbW1vbiBzdWJzdHJpbmdzLCBhbHNvIGtub3duIGFzIGNoYWZmLlxuZXhwb3J0cy5kaWZmU3RyaW5nc1VuaWZpZWQgPSBkaWZmU3RyaW5nc1VuaWZpZWQ7XG5jb25zdCBkaWZmU3RyaW5nc1JhdyA9IChhLCBiLCBjbGVhbnVwKSA9PiB7XG4gIGNvbnN0IGRpZmZzID0gKDAsIF9kaWZmU3RyaW5ncy5kZWZhdWx0KShhLCBiKTtcbiAgaWYgKGNsZWFudXApIHtcbiAgICAoMCwgX2NsZWFudXBTZW1hbnRpYy5jbGVhbnVwU2VtYW50aWMpKGRpZmZzKTsgLy8gaW1wdXJlIGZ1bmN0aW9uXG4gIH1cblxuICByZXR1cm4gZGlmZnM7XG59O1xuZXhwb3J0cy5kaWZmU3RyaW5nc1JhdyA9IGRpZmZTdHJpbmdzUmF3O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jest-diff/build/printDiffs.js\n");

/***/ })

};
;